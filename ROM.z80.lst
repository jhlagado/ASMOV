0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 25               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 25               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 25               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 25               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 25               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 25               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 25               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 25               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 25               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 25               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 25               LD   (RST08),HL   
0094   22 D2 25               LD   (RST10),HL   
0097   22 D4 25               LD   (RST18),HL   
009A   22 D6 25               LD   (RST20),HL   
009D   22 D8 25               LD   (RST28),HL   
00A0   22 DA 25               LD   (RST30),HL   
00A3   22 DE 25               LD   (INTVEC),HL   
00A6   22 E0 25               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 25               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 25               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start ASMOV
00C6   C3 45 10               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  ASMOV programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of ASMOV code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put ASMOV code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                             ;********************** PAGE 1 END *********************************************
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 23                  DW   TIB   ; vTIBPtr pointer into TIB
0182   00 24                  DW   BUFFER   ; vBufPtr pointer into BUF
0184   26 26                  DW   HEAP   ; vHeapPtr start of the free mem
0186   00 22                  DW   NAMES   ; vNamesPtr
0188   00 00                  DW   NUL   ; vRecurPtr
018A   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
018B   0A                     DB   10   ; vNumBase = 10
018C   24                     DB   "$"   ; vHexPrefix
018D   FF                     DB   TRUE   ; vEcho
018E   00                     DB   FALSE   ; vStrMode
018F   00                     DB   0   
0190   00                     DB   0   
0191   00                     DB   0   
0192                             ; **********************************************************************			
0192                             ; title string (also used by warm boot)
0192                             ; **********************************************************************
0192                TITLESTR:      
0192   1B 5B 32 4A 41 53 4D 4F 56 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JASMOV V0.1\r\n",0,0,0   
01A6                             ;********************** PAGE 2 BEGIN ***********************************
01A6                          ALIGN   $100   
0200                PEARSON:      
0200   CE 00 73 16 01 40 6F 2F 57 4E 41 0D 2D 2E 15 02 64 7E 0B 53 20 04 72 47 39 08 26 33 38 3D 54 1B DB   206,0,115,22,1,64,111,47,87,78,65,13,45,46,21,2,100,126,11,83,32,4,114,71,57,8,38,51,56,61,84,27   
0220   1E 71 1A 7A 48 4A 32 18 31 5D 49 21 2B E4 D4 D7 66 4C BD B2 5F 27 42 EF B6 DD 0C 6B AC 67 F5 C3 DB   30,113,26,122,72,74,50,24,49,93,73,33,43,228,212,215,102,76,189,178,95,39,66,239,182,221,12,107,172,103,245,195   
0240   BE 3E 6D B4 24 79 B8 58 46 9D 0E 0A 44 A3 AF C6 E5 C2 12 5C 85 A8 A5 3B 90 7F EB 19 8D 55 C5 F2 DB   190,62,109,180,36,121,184,88,70,157,14,10,68,163,175,198,229,194,18,92,133,168,165,59,144,127,235,25,141,85,197,242   
0260   88 FA 43 29 1D 52 B1 DF 07 09 D3 97 11 5B 22 7B 5A 1F 45 DC C9 3C 84 2C DB FE D5 03 B5 CB EA 0F DB   136,250,67,41,29,82,177,223,7,9,211,151,17,91,34,123,90,31,69,220,201,60,132,44,219,254,213,3,181,203,234,15   
0280   50 E6 34 6C F0 76 62 D0 7C D8 06 61 35 DE 10 65 1C 69 E8 74 83 4D 36 3A E9 4B 14 68 23 CF 60 BC DB   80,230,52,108,240,118,98,208,124,216,6,97,53,222,16,101,28,105,232,116,131,77,54,58,233,75,20,104,35,207,96,188   
02A0   3F C8 30 BF 98 56 8B 59 8C F7 CC 28 4F 7D 17 FF 13 6A C7 05 51 37 70 77 BB 75 63 6E A7 25 C1 2A DB   63,200,48,191,152,86,139,89,140,247,204,40,79,125,23,255,19,106,199,5,81,55,112,119,187,117,99,110,167,37,193,42   
02C0   94 78 A6 5E F6 FD CA 8E F9 9F 80 D1 8F D6 C4 C0 FB 81 DA CD A2 96 A1 D2 ED 82 EC F4 F8 87 8A E0 DB   148,120,166,94,246,253,202,142,249,159,128,209,143,214,196,192,251,129,218,205,162,150,161,210,237,130,236,244,248,135,138,224   
02E0   FC EE E7 BA E1 A0 E2 B0 95 9A F3 E3 D9 92 AA F1 AD 9B AB A4 86 B7 99 9E A9 AE 93 91 B9 9C 89 B3 DB   252,238,231,186,225,160,226,176,149,154,243,227,217,146,170,241,173,155,171,164,134,183,153,158,169,174,147,145,185,156,137,179   
0300                OPCODES:      
0300   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   set_,add_,0,srl_,0,0,0,ccf_,0,0,0,0,0,0,0,sll_,rra_,0,0,0,0,0,adc_,0,0,0,0,0,0,im_,0,0   
0320   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,retn_,0,0,0,0,0,0,0,0,0,0,sbc_,0,0,cpd_,0,rrc_,0,0,indr_,0,0,pop_,ld_,0,cpdr_,0   
0340   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,rst_,0,scf_,sla_,0,djnz_,0,ex_,call_,0,exx_,sub_,or_,0,0,0,0,cpl_,0,0,0,0,0,0,0,res_,0,rl_,otdr_,0   
0360   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   outd_,rrd_,0,reti_,0,0,0,bit_,0,0,0,ei_,0,0,ind_,0,ini_,0,cpi_,inir_,outi_,0,0,0,0,0,xor_,0,0,0,0,cp_   
0380   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,rlca_,sra_,rrca_,0,0,0,0,0,0,0,0,0,0,ldd_,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
03A0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   otir_,0,daa_,0,halt_,0,0,inc_,ldi_,0,0,0,rla_,push_,0,0,and_,0,0,0,0,0,0,0,0,0,0,dec_,0,0,0,jp_   
03C0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,neg_,0,0,0,0,jr_,di_,0,0,0,nop_,cpir_,0,0,0,0,ret_,0,0,0,0,0,0,0,0,0,rld_,0,in_   
03E0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,lddr_,0,0,0,0,ldir_,0,0,rr_,0,0,0,0,0,rlc_,0,0,0,0,out_,0,0,0,0,0   
0400                          ALIGN   $100   
0400                RLA_:        
0400                OUTI_:       
0400                INDR_:       
0400                IND_:        
0400                RL_:         
0400                CP_:         
0400                EX_:         
0400                IN_:         
0400                EI_:         
0400                INC_:        
0400                LDIR_:       
0400                DEC_:        
0400                ADD_:        
0400                SLA_:        
0400                EXX_:        
0400                RRC_:        
0400                OR_:         
0400                IM_:         
0400                OTDR_:       
0400                DI_:         
0400                JR_:         
0400                SRA_:        
0400                NEG_:        
0400                CCF_:        
0400                AND_:        
0400                RES_:        
0400                CPDR_:       
0400                SCF_:        
0400                RST_:        
0400                POP_:        
0400                RETI_:       
0400                LDD_:        
0400                OUTD_:       
0400                RRD_:        
0400                ADC_:        
0400                RETN_:       
0400                RLC_:        
0400                SUB_:        
0400                CPI_:        
0400                CALL_:       
0400                OUT_:        
0400                XOR_:        
0400                LD_:         
0400                RLD_:        
0400                DJNZ_:       
0400                CPIR_:       
0400                SET_:        
0400                PUSH_:       
0400                INI_:        
0400                RRA_:        
0400                BIT_:        
0400                LDDR_:       
0400                SLL_:        
0400                DAA_:        
0400                OTIR_:       
0400                CPD_:        
0400                RRCA_:       
0400                INIR_:       
0400                CPL_:        
0400                RR_:         
0400                JP_:         
0400                HALT_:       
0400                SBC_:        
0400                NOP_:        
0400                RLCA_:       
0400                RET_:        
0400                SRL_:        
0400                LDI_:        
0400                COLON_:      
0400                HASH_:       
0400   DD E9                  JP   (ix)   
0402                COMMA_:      
0402   C3 53 0A               JP   comma   
0405                DOLLAR_:      
0405   C3 FB 0A               JP   dollar   
0408                DQUOTE_:      
0408                QUOTE_:      
0408   C3 25 0B               JP   quote   
040B                DOT_:        
040B   C3 00 06               JP   dot   
040E                PERCENT_:      
040E   C3 3F 0B               JP   percent   
0411                QUESTION_:      
0411   C3 18 0B               JP   question   
0414                LPAREN_:      
0414   C3 CB 05               JP   lbrace   
0417                SLASH_:      
0417   C3 00 07               JP   slash   
041A                NUM_:        
041A   C3 74 0B               JP   num   
041D                BANG_:       
041D                BANG:        ; logical invert, any non zero value
041D   03                     INC   bc   
041E   0A                     LD   a,(bc)   
041F   FE 3D                  CP   "="   
0421   20 05                  JR   nz,not   
0423   E1                     POP   hl   
0424   D1                     POP   de   
0425   C3 B6 0C               JP   notequals   
0428                NOT:         
0428   0B                     DEC   bc   
0429   21 00 00               LD   hl,0   ; is considered true
042C   18 0B                  JR   eq1   
042E                EQ_:         
042E                EQ:          
042E   03                     INC   bc   
042F   0A                     LD   a,(bc)   
0430   FE 3D                  CP   "="   
0432   28 04                  JR   z,eq0   
0434   0B                     DEC   bc   
0435   C3 9E 0C               JP   assign   
0438                EQ0:         
0438   E1                     POP   hl   
0439                EQ1:         
0439   D1                     POP   de   
043A   C3 AF 0C               JP   equals   
043D                GT_:         
043D                GT:          
043D   03                     INC   bc   
043E   0A                     LD   a,(bc)   
043F   FE 3E                  CP   ">"   
0441   CA 16 0D               JP   z,shiftRight   
0444   D1                     POP   de   
0445   E1                     POP   hl   
0446   18 09                  JR   lt1   
0448                LT_:         
0448                LT:          
0448   03                     INC   bc   
0449   0A                     LD   a,(bc)   
044A   FE 3C                  CP   "<"   
044C   CA FA 0C               JP   z,shiftLeft   
044F   E1                     POP   hl   
0450   D1                     POP   de   
0451                LT1:         
0451   FE 3D                  CP   "="   
0453   CA BD 0C               JP   z,lessthaneq   
0456   0B                     DEC   bc   
0457   C3 C2 0C               JP   lessthan   
045A                             ; index of an array, based on vDataWidth 22
045A                             ; array* num -- value    ; also sets vPointer to address
045A                SEMICOLON_:      
045A                SEMICOLON:      
045A                ARRAYINDEX:      
045A   E1                     POP   hl   ; hl = index
045B   D1                     POP   de   ; de = array
045C   3A F0 25               LD   a,(vDataWidth)   ; a = data width
045F   3D                     DEC   a   
0460   28 01                  JR   z,arrayIndex1   
0462                ARRAYINDEX0:      
0462   29                     ADD   hl,hl   ; if data width = 2 then double
0463                ARRAYINDEX1:      
0463   19                     ADD   hl,de   ; add addr
0464   C3 AF 0E               JP   variable   
0467                             ;                               4
0467                RPAREN_:      
0467                             ; jp rparen
0467                RPAREN:      
0467   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
046A   FD 46 09               LD   b,(iy+9)   
046D   DD E9                  JP   (ix)   
046F                             ; & and                          14
046F                             ; a b -- c
046F                AMPER_:      
046F                AMPER:       
046F                AND:         
046F   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0470   E1                     POP   hl   
0471   7B                     LD   a,e   
0472   A5                     AND   l   
0473   6F                     LD   l,a   
0474   7A                     LD   a,d   
0475   A4                     AND   h   
0476   67                     LD   h,a   
0477   18 5B                  JR   add3   
0479                             ; - sub
0479                             ; a b -- c
0479                             ; -- sub
0479                             ; b1 -- b2
0479                             ; -= sub
0479                             ; a b1 -- b2
0479                MINUS_:      
0479                MINUS:       
0479   03                     INC   bc   ; check if sign of a number
047A   0A                     LD   a,(bc)   
047B   0B                     DEC   bc   
047C   FE 30                  CP   "0"   
047E   38 05                  JR   c,sub   
0480   FE 3A                  CP   "9"+1   
0482   DA 74 0B               JP   c,num   
0485                SUB:         ; Subtract the value 2nd on stack from top of stack
0485   E1                     POP   hl   ; hl = arg_b
0486   03                     INC   bc   
0487   FE 2D                  CP   "-"   
0489   20 04                  JR   nz,sub1   
048B   2B                     DEC   hl   ; --
048C   C3 A0 0C               JP   assign0   
048F                SUB1:        
048F   D1                     POP   de   ; de = arg_a
0490   FE 3D                  CP   "="   
0492   28 02                  JR   z,sub2   
0494   0B                     DEC   bc   ; -
0495   EB                     EX   de,hl   
0496                SUB2:        
0496   B7                     OR   a   ; -=
0497   ED 52                  SBC   hl,de   
0499                SUB3:        
0499   FE 3D                  CP   "="   
049B   CA A0 0C               JP   z,assign0   
049E   E5                     PUSH   hl   
049F   DD E9                  JP   (ix)   
04A1                STAR_:       ; 21
04A1                STAR:        
04A1   03                     INC   bc   ; check for ** spread
04A2   0A                     LD   a,(bc)   
04A3   FE 2A                  CP   "*"   
04A5   CA D6 0C               JP   z,spread   
04A8   0B                     DEC   bc   
04A9                MUL:         
04A9   D1                     POP   de   ; get first value
04AA   E1                     POP   hl   
04AB                MUL2:        
04AB   C5                     PUSH   bc   ; Preserve the IP
04AC   44 4D                  LD   bc,hl   ; bc = 2nd value
04AE   21 00 00               LD   hl,0   
04B1   3E 10                  LD   a,16   
04B3                MUL3:        
04B3   29                     ADD   hl,hl   
04B4   CB 13                  RL   e   
04B6   CB 12                  RL   d   
04B8   30 04                  JR   nc,$+6   
04BA   09                     ADD   hl,bc   
04BB   30 01                  JR   nc,$+3   
04BD   13                     INC   de   
04BE   3D                     DEC   a   
04BF   20 F2                  JR   nz,mul3   
04C1   C1                     POP   bc   ; Restore the IP
04C2   C3 D4 04               JP   add3   
04C5                             ; + add                         25
04C5                             ; a b -- c
04C5                PLUS_:       
04C5                PLUS:        
04C5                ADD:         
04C5   03                     INC   bc   
04C6   0A                     LD   a,(bc)   
04C7   FE 2B                  CP   "+"   ; ++ increment variable
04C9   20 05                  JR   nz,add1   
04CB   E1                     POP   hl   
04CC   23                     INC   hl   
04CD   C3 A0 0C               JP   assign0   
04D0                ADD1:        
04D0   0B                     DEC   bc   
04D1   D1                     POP   de   ; second term
04D2   E1                     POP   hl   ; first term
04D3   19                     ADD   hl,de   
04D4                ADD3:        
04D4   03                     INC   bc   
04D5   0A                     LD   a,(bc)   
04D6   FE 3D                  CP   "="   
04D8   28 04                  JR   z,add4   
04DA   0B                     DEC   bc   
04DB   E5                     PUSH   hl   
04DC   DD E9                  JP   (ix)   
04DE                ADD4:        
04DE   C3 A0 0C               JP   assign0   
04E1                             ;                               18
04E1                UPCASE_:      
04E1                UPCASE:      
04E1   0A                     LD   a,(bc)   ; a = identifier char
04E2   D6 41                  SUB   "A"   ; "A" = 0
04E4   18 1F                  JR   ident1   
04E6                             ;********************** PAGE 2 END *********************************************
04E6                          ALIGN   $100   
0500                             ;********************** PAGE 3 BEGIN *********************************************
0500                LOWCASE_:      
0500                LOWCASE:      
0500   0A                     LD   a,(bc)   
0501   D6 61                  SUB   "a"   
0503   C6 1A                  ADD   a,26   
0505                IDENT1:      
0505   87                     ADD   a,a   ; l = a * 2
0506   6F                     LD   l,a   
0507   26 25                  LD   h,msb(VARS)   
0509   22 FA 25               LD   (vPointer),hl   ; store address in setter
050C   5E                     LD   e,(hl)   
050D   23                     INC   hl   
050E   56                     LD   d,(hl)   
050F   D5                     PUSH   de   
0510   DD E9                  JP   (ix)   
0512                             ; [                             14
0512                LBRACK_:      
0512                LBRACK:      
0512                ARRAYSTART:      
0512   11 00 00               LD   de,0   ; create stack frame
0515   D5                     PUSH   de   ; push null for IP
0516   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0519   FD 56 05               LD   d,(iy+5)   ; 
051C   D5                     PUSH   de   ; 
051D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0520   FD 56 03               LD   d,(iy+3)   ; 
0523   D5                     PUSH   de   ; 
0524   FD E5                  PUSH   iy   ; push BP
0526   FD 21 00 00            LD   iy,0   ; BP = SP
052A   FD 39                  ADD   iy,sp   
052C   DD E9                  JP   (ix)   
052E                             ; \                             19
052E                BACKSLASH_:      
052E                BACKSLASH:      
052E                LAMBDA:      
052E   DD E5                  PUSH   ix   
0530   CD 68 0D               CALL   parseArgs   
0533                LAMBDA1:      
0533   03                     INC   bc   ; arg_list must ve immediately followed by {
0534   0A                     LD   a,(bc)   
0535   FE 21                  CP   " "+1   ; skip white space
0537   38 FA                  JR   c,lambda1   
0539   FE 7B                  CP   "{"   
053B   28 06                  JR   z,lambda2   
053D   21 02 00               LD   hl,2   ; error 2: parse error
0540   C3 F8 10               JP   error   
0543                LAMBDA2:      
0543   CD 9E 0D               CALL   parseBlock   
0546   CD 0D 0E               CALL   createFunc   
0549   E1                     POP   hl   
054A   DD E1                  POP   ix   
054C   E5                     PUSH   hl   
054D   DD E9                  JP   (ix)   
054F                RBRACK_:      
054F                RBRACK:      
054F                ARRAYEND:      ; 53
054F   FD 54                  LD   d,iyh   ; de = BP
0551   FD 5D                  LD   e,iyl   
0553   ED 43 08 26            LD   (vTemp1),bc   ; save IP
0557   62 6B                  LD   hl,de   ; hl = de = BP
0559   B7                     OR   a   
055A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
055C   CB 3C                  SRL   h   ; 
055E   CB 1D                  RR   l   
0560   44 4D                  LD   bc,hl   ; bc = count
0562   2A EA 25               LD   hl,(vHeapPtr)   ; hl = array[-4]
0565   71                     LD   (hl),c   ; write num items in length word
0566   23                     INC   hl   
0567   70                     LD   (hl),b   
0568   23                     INC   hl   ; hl = array[0], bc = count
0569                             ; de = BP, hl = array[0], bc = count
0569   18 15                  JR   arrayEnd3   
056B                ARRAYEND1:      
056B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
056E   77                     LD   (hl),a   ; write lsb of array item
056F   23                     INC   hl   ; move to msb of array item
0570   3A F0 25               LD   a,(vDataWidth)   ; vDataWidth=1?
0573   3D                     DEC   a   
0574   28 05                  JR   z,arrayEnd2   
0576   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0579   77                     LD   (hl),a   ; write msb of array item
057A   23                     INC   hl   ; move to next word in array
057B                ARRAYEND2:      
057B   FD 2B                  DEC   iy   ; move to next word on stack
057D   FD 2B                  DEC   iy   
057F   0B                     DEC   bc   ; dec items count
0580                ARRAYEND3:      
0580   79                     LD   a,c   ; if not zero loop
0581   B0                     OR   b   
0582   20 E7                  JR   nz,arrayEnd1   
0584   EB                     EX   de,hl   ; de = end of array, hl = BP
0585   F9                     LD   sp,hl   ; sp = BP
0586   E1                     POP   hl   ; de = end of array, hl = old BP
0587   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0588   FD 62                  LD   iyh,d   
058A   FD 6B                  LD   iyl,e   
058C   D1                     POP   de   ; pop arg_list (discard)
058D   D1                     POP   de   ; pop first_arg* (discard)
058E   D1                     POP   de   ; pop IP (discard)
058F   ED 5B EA 25            LD   de,(vHeapPtr)   ; de = array[-2]
0593   13                     INC   de   
0594   13                     INC   de   
0595   D5                     PUSH   de   ; return array[0]
0596   22 EA 25               LD   (vHeapPtr),hl   ; move heap* to end of array
0599   ED 4B 08 26            LD   bc,(vTemp1)   ; restore IP
059D   DD E9                  JP   (ix)   
059F                CARET_:      
059F                             ; execute a block of code which ends with } 116
059F                             ; creates a root scope if BP == stack
059F                             ; else uses outer scope
059F                CARET:       
059F                GO:          
059F   D1                     POP   de   ; de = block*
05A0                GO1:         
05A0   7B                     LD   a,e   ; if block* == null, exit
05A1   B2                     OR   d   
05A2   20 02                  JR   nz,go2   
05A4   DD E9                  JP   (ix)   
05A6                GO2:         
05A6   1A                     LD   a,(de)   
05A7   FE 7B                  CP   "{"   
05A9   CA 11 0C               JP   z,goBlock   
05AC   FE 28                  CP   "("   
05AE   C2 44 0C               JP   nz,goFunc   
05B1   D5                     PUSH   de   ; push de just before stack frame
05B2   CA 11 0C               JP   z,goBlock   
05B5                GRAVE_:      
05B5                GRAVE:       
05B5                PRINTLITERAL:      
05B5   03                     INC   bc   ; move to first char
05B6   ED 5B E8 25            LD   de,(vBufPtr)   ; de = buffer*
05BA   18 03                  JR   printLiteral1   
05BC                PRINTLITERAL0:      
05BC   12                     LD   (de),a   ; a -> buffer*
05BD   13                     INC   de   ; string*++,
05BE   03                     INC   bc   
05BF                PRINTLITERAL1:      
05BF   0A                     LD   a,(bc)   ; a <- string*
05C0   FE 60                  CP   "`"   ; if ` exit loop
05C2   20 F8                  JR   nz,printLiteral0   
05C4   ED 53 E8 25            LD   (vBufPtr),de   ; save buffer*' in pointer
05C8   C3 4E 0D               JP   dotNext   
05CB                LBRACE_:      
05CB                LBRACE:      
05CB   CD 9E 0D               CALL   parseBlock   
05CE   DD E9                  JP   (ix)   
05D0                             ; | or                          11
05D0                             ; a b -- c
05D0                PIPE_:       
05D0                PIPE:        
05D0                OR:          
05D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
05D1   E1                     POP   hl   
05D2   7B                     LD   a,e   
05D3   B5                     OR   l   
05D4   6F                     LD   l,a   
05D5   7A                     LD   a,d   
05D6   B4                     OR   h   
05D7   67                     LD   h,a   
05D8   C3 D4 04               JP   add3   
05DB                RBRACE_:      
05DB   C3 A4 0B               JP   rbrace   
05DE                             ; ~ char                        8
05DE                TILDE_:      
05DE   C3 F1 0A               JP   tilde   
05E1                UNDERSCORE_:      
05E1                CHAR:        
05E1   03                     INC   bc   ; point to next char
05E2   0A                     LD   a,(bc)   
05E3   6F                     LD   l,a   
05E4   26 00                  LD   h,0   
05E6   E5                     PUSH   hl   
05E7   DD E9                  JP   (ix)   
05E9                AT_:         
05E9                AT:          
05E9                ADDR:        
05E9   ED 5B FA 25            LD   de,(vPointer)   
05ED   21 FA 25               LD   hl,vPointer   
05F0   C3 AF 0E               JP   variable   
05F3                             ;********************** PAGE 3 END *********************************************
05F3                          ALIGN   $100   
0600                             ;********************** PAGE 4 BEGIN *********************************************
0600                             ;                               67
0600                DOT:         
0600                PRINT:       
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 61                  CP   "a"   ; .a print array
0604   28 0B                  JR   z,printArray   
0606   FE 63                  CP   "c"   ; .c print char
0608   28 0A                  JR   z,printChar   
060A   FE 73                  CP   "s"   ; .s print string
060C   28 15                  JR   z,printString   
060E   0B                     DEC   bc   
060F   18 27                  JR   printNumber   ; .  print number, fall through
0611                PRINTARRAY:      ; TODO
0611   C3 4E 0D               JP   dotNext   
0614                             ; .c print char
0614                             ; char --
0614                PRINTCHAR:      
0614   E1                     POP   hl   ; a = char
0615   7D                     LD   a,l   
0616   ED 5B E8 25            LD   de,(vBufPtr)   ; de = buffer*
061A   12                     LD   (de),a   
061B   13                     INC   de   
061C   ED 53 E8 25            LD   (vBufPtr),de   ; save buffer*'
0620   C3 4E 0D               JP   dotNext   
0623                             ; .s print string
0623                             ; string* --
0623                PRINTSTRING:      
0623   E1                     POP   hl   ; hl = string*
0624   ED 5B E8 25            LD   de,(vBufPtr)   ; de = buffer*
0628   18 03                  JR   printString1   
062A                PRINTSTRING0:      
062A   12                     LD   (de),a   ; a -> buffer*
062B   13                     INC   de   ; string*++,
062C   23                     INC   hl   
062D                PRINTSTRING1:      
062D   7E                     LD   a,(hl)   ; a <- string*
062E   B7                     OR   a   ; if NUL exit loop
062F   20 F9                  JR   nz,printString0   
0631   ED 53 E8 25            LD   (vBufPtr),de   ; save buffer*' in pointer
0635   C3 4E 0D               JP   dotNext   
0638                             ; . print decimal
0638                             ; value --
0638                PRINTNUMBER:      
0638   3A F1 25               LD   a,(vNumBase)   
063B   FE 10                  CP   16   
063D   CA 60 06               JP   z,printHex   ; else falls through
0640   C3 43 06               JP   printDec   
0643                             ; print decimal                 ; 70
0643                             ; value --
0643                PRINTDEC:      
0643   ED 5B E8 25            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0647   D9                     EXX      
0648   E1                     POP   hl   ; hl = value
0649   3A F0 25               LD   a,(vDataWidth)   
064C   3D                     DEC   a   
064D   20 02                  JR   nz,printDec1   
064F   26 00                  LD   h,0   
0651                PRINTDEC1:      
0651   CD 21 0F               CALL   formatDec   
0654   D9                     EXX      ; de = buffer*' bc = IP
0655   3E 20                  LD   a," "   ; append space to buffer
0657   12                     LD   (de),a   
0658   13                     INC   de   ; string*++,
0659   ED 53 E8 25            LD   (vBufPtr),de   ; update buffer* with buffer*'
065D   C3 4E 0D               JP   dotNext   
0660                             ; buffer hex                    37
0660                             ; value --
0660                PRINTHEX:      
0660   ED 5B E8 25            LD   de,(vBufPtr)   
0664   3A F2 25               LD   a,(vHexPrefix)   ; "$"
0667   B7                     OR   a   ; skip if null
0668   28 02                  JR   z,printHex1   
066A   12                     LD   (de),a   
066B   13                     INC   de   ; string*++,
066C                PRINTHEX1:      
066C   E1                     POP   hl   ; hl = value
066D   3A F0 25               LD   a,(vDataWidth)   
0670   3D                     DEC   a   
0671   28 04                  JR   z,printHex2   
0673   7C                     LD   a,h   
0674   CD 86 06               CALL   printHex3   
0677                PRINTHEX2:      
0677   7D                     LD   a,l   
0678   CD 86 06               CALL   printHex3   
067B   3E 20                  LD   a," "   ; append space to buffer
067D   12                     LD   (de),a   
067E   13                     INC   de   ; string*++,
067F   ED 53 E8 25            LD   (vBufPtr),de   
0683   C3 4E 0D               JP   dotNext   
0686                PRINTHEX3:      
0686   F5                     PUSH   af   
0687   1F                     RRA      
0688   1F                     RRA      
0689   1F                     RRA      
068A   1F                     RRA      
068B   CD 8F 06               CALL   printHex4   
068E   F1                     POP   af   
068F                PRINTHEX4:      
068F   E6 0F                  AND   0x0F   
0691   C6 90                  ADD   a,0x90   
0693   27                     DAA      
0694   CE 40                  ADC   a,0x40   
0696   27                     DAA      
0697   12                     LD   (de),a   
0698   13                     INC   de   ; string*++,
0699   C9                     RET      
069A                             ;********************** PAGE 4 END *********************************************
069A                          ALIGN   $100   
0700                             ;********************** PAGE 5 BEGIN *********************************************
0700                SLASH:       
0700                COMMAND:      
0700   03                     INC   bc   
0701   0A                     LD   a,(bc)   
0702   FE 2F                  CP   "/"   ; // comment
0704   CA 29 0A               JP   z,comment   
0707   CD DC 0E               CALL   identHash   
070A   21 32 0A               LD   hl,error1   
070D   CD EE 0E               CALL   commandTable   
0710   68 00 00 00 00 71 00 00 00 00 00 00 00 1F 00 00 DB   lsb(div_),0,0,0,0,lsb(f_),0,0,0,0,0,0,0,lsb(word_),0,0   
0720   00 00 00 02 10 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,lsb(t_),lsb(abs_),0,lsb(dec_),0,0,0,0,0,0,lsb(in_),0,0   
0730   00 00 2C 1E 00 00 00 00 00 3B 00 00 00 00 00 00 DB   0,0,lsb(cgo_),lsb(aln_),0,0,0,0,0,lsb(cll_),0,0,0,0,0,0   
0740   34 00 00 00 00 44 00 00 29 00 00 80 00 00 00 00 DB   lsb(cls_),0,0,0,0,lsb(cmv_),0,0,lsb(bye_),0,0,lsb(hex_),0,0,0,0   
0750   00 52 00 00 6B 00 00 90 00 00 00 C4 00 9C CC A8 DB   0,lsb(cur_),0,0,lsb(echo_),0,0,lsb(max_),0,0,0,lsb(sbb_),0,lsb(min_),lsb(sbe_),lsb(nil_)   
0760   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
0770   00 00 27 00 00 39 00 00 00 00 00 FB 00 00 74 00 DB   0,0,lsb(args_),0,0,lsb(var_),0,0,0,0,0,lsb(sln_),0,0,lsb(frac_),0   
0780   00 B4 00 00 00 00 00 BA 7A 00 00 00 00 00 00 00 DB   0,lsb(recur_),0,lsb(out_),0,0,0,lsb(return_),lsb(free_),0,0,0,0,0,0,0   
0790   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,lsb(xor_),lsb(sys_),0,0,0,0,0   
07A0   00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,lsb(byte_),0,0,0,0,0,0,0,0,0,0,0,0,0   
07B0   00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,lsb(alloc_),0,0,0,0,0,0,0,0,0,0,0,0,0   
07C0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0B DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,lsb(scmp_)   
07D0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
07E0   00 00 05 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,lsb(while_),0,0,0,0,0,0,0,0,0,0,0,0,0   
07F0   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 DB   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   
0800   00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 13 DB   0,0,0,lsb(void_),0,0,0,0,0,0,0,0,0,0,0,lsb(select_)   
0810                             ;********************** PAGE 5 END *********************************************
0810                             ;********************** PAGE 6 BEGIN *********************************************
0810                             ; /abs absolute
0810                             ; num -- num
0810                ABS_:        
0810                ABSOLUTE:      
0810   E1                     POP   hl   
0811   CB 7C                  BIT   7,h   
0813   28 06                  JR   z,absolute1   
0815   AF                     XOR   a   
0816   95                     SUB   l   
0817   6F                     LD   l,a   
0818   9F                     SBC   a,a   
0819   94                     SUB   h   
081A   67                     LD   h,a   
081B                ABSOLUTE1:      
081B   E5                     PUSH   hl   
081C   DD E9                  JP   (ix)   
081E                             ; /aln length of an array, num elements
081E                             ; array* -- num
081E                ALN_:        
081E                ARRAYLENGTH:      
081E   E1                     POP   hl   
081F   2B                     DEC   hl   ; msb size
0820   56                     LD   d,(hl)   
0821   2B                     DEC   hl   ; lsb size
0822   5E                     LD   e,(hl)   
0823   EB                     EX   de,hl   
0824                ARRAYLENGTH1:      
0824   E5                     PUSH   hl   
0825   DD E9                  JP   (ix)   
0827                             ; /args
0827                ARGS_:       
0827   DD E9                  JP   (ix)   
0829                             ; /bye
0829                BYE_:        
0829   C3 14 10               JP   coldBoot0   
082C                             ; /cgo cursorGo
082C                             ; row column --
082C                CGO_:        
082C                CURSORGO:      
082C   D1                     POP   de   
082D   E1                     POP   hl   
082E   62                     LD   h,d   
082F   CD 66 11               CALL   ansiGoto   
0832   DD E9                  JP   (ix)   
0834                             ; /cls clear screen
0834                             ; --
0834                CLS_:        
0834                CLEARSCREEN:      
0834   CD 4E 11               CALL   ansiClearScreen   
0837   DD E9                  JP   (ix)   
0839                             ; /var
0839                VAR_:        
0839   DD E9                  JP   (ix)   
083B                             ; /cll clear line
083B                             ; num --
083B                CLL_:        
083B                CLEARLINE:      
083B   E1                     POP   hl   
083C   7D                     LD   a,l   
083D   E6 03                  AND   $03   
083F   CD 57 11               CALL   ansiClearLine   
0842   DD E9                  JP   (ix)   
0844                             ; /cmv cursor move
0844                             ; x dir --
0844                CMV_:        
0844                CURSORMOVE:      
0844   E1                     POP   hl   
0845   7D                     LD   a,l   
0846   E6 03                  AND   $03   
0848   C6 41                  ADD   a,"A"   
084A   67                     LD   h,a   
084B   D1                     POP   de   
084C   6B                     LD   l,e   
084D   CD 83 11               CALL   ansiMove   
0850                CURSORMOVE1:      
0850   DD E9                  JP   (ix)   
0852                             ; /cur cursor hide / show
0852                             ; bool --
0852                CUR_:        
0852                CURSORSHOW:      
0852   E1                     POP   hl   
0853   23                     INC   hl   
0854   7D                     LD   a,l   
0855   B4                     OR   h   
0856   3E 68                  LD   a,"h"   
0858   28 02                  JR   z,cursorShow1   
085A   3E 6C                  LD   a,"l"   
085C                CURSORSHOW1:      
085C   CD A2 11               CALL   ansiCursorShow   
085F   DD E9                  JP   (ix)   
0861                DECBASE:      
0861   3E 0A                  LD   a,10   
0863                DECBASE1:      
0863   32 F1 25               LD   (vNumBase),a   
0866   DD E9                  JP   (ix)   
0868                             ; /div
0868                DIV_:        
0868   C3 38 0A               JP   div1   
086B                             ; /ech
086B                             ; bool --
086B                ECHO_:       
086B                ECHO:        
086B   E1                     POP   hl   
086C   22 F3 25               LD   (vEcho),hl   
086F   DD E9                  JP   (ix)   
0871                             ; /f
0871                F_:          
0871   C3 D0 0C               JP   false1   
0874                             ; /frac
0874                FRAC_:       
0874                REMAIN:      
0874   2A FC 25               LD   hl,(vRemain)   
0877   E5                     PUSH   hl   
0878   DD E9                  JP   (ix)   
087A                             ; /free
087A                             ; adr --
087A                FREE_:       
087A                MEMFREE:      
087A   E1                     POP   hl   
087B                MEMFREE1:      
087B   22 EA 25               LD   (vHeapPtr),hl   
087E   DD E9                  JP   (ix)   
0880                HEX_:        
0880   3E 10                  LD   a,16   
0882   C3 63 08               JP   decBase1   
0885                             ; Z80 port input
0885                             ; /in
0885                             ; port -- value
0885                INPUT:       
0885   E1                     POP   hl   
0886   59                     LD   e,c   ; save IP
0887   4D                     LD   c,l   
0888   ED 68                  IN   l,(c)   
088A   26 00                  LD   h,0   
088C   4B                     LD   c,e   ; restore IP
088D   E5                     PUSH   hl   
088E   DD E9                  JP   (ix)   
0890                             ; /max maximum
0890                             ; a b -- c
0890                MAX_:        
0890                MAXIMUM:      
0890   E1                     POP   hl   
0891   D1                     POP   de   
0892   E5                     PUSH   hl   
0893   B3                     OR   e   
0894   ED 52                  SBC   hl,de   
0896   30 02                  JR   nc,maximum1   
0898   E1                     POP   hl   
0899   D5                     PUSH   de   
089A                MAXIMUM1:      
089A   DD E9                  JP   (ix)   
089C                             ; /min minimum
089C                             ; a b -- c
089C                MIN_:        
089C                MINIMUM:      
089C   E1                     POP   hl   
089D   D1                     POP   de   
089E   E5                     PUSH   hl   
089F   B3                     OR   e   
08A0   ED 52                  SBC   hl,de   
08A2   38 02                  JR   c,minimum1   
08A4   E1                     POP   hl   
08A5   D5                     PUSH   de   
08A6                MINIMUM1:      
08A6   DD E9                  JP   (ix)   
08A8                             ; /nil
08A8                NIL_:        
08A8   C3 D0 0C               JP   null1   
08AB                             ; /o Z80 port output
08AB                             ; value port --
08AB                OUTPUT:      
08AB   E1                     POP   hl   
08AC   59                     LD   e,c   ; save IP
08AD   4D                     LD   c,l   
08AE   E1                     POP   hl   
08AF   ED 69                  OUT   (c),l   
08B1   4B                     LD   c,e   ; restore IP
08B2   DD E9                  JP   (ix)   
08B4                             ; /rec
08B4                RECUR_:      
08B4                RECUR:       
08B4   E1                     POP   hl   
08B5   22 EE 25               LD   (vRecurPtr),hl   
08B8   DD E9                  JP   (ix)   
08BA                             ; /ret
08BA                             ; --
08BA                RETURN_:      
08BA                RETURN:      
08BA   E1                     POP   hl   ; hl = condition, exit if true
08BB   7D                     LD   a,l   
08BC   B4                     OR   h   
08BD   20 02                  JR   nz,return1   
08BF   DD E9                  JP   (ix)   
08C1                RETURN1:      
08C1   C3 A4 0B               JP   blockEnd   
08C4                             ; /sbb
08C4                SBB_:        
08C4                STRINGBEGIN:      
08C4   21 FF FF               LD   hl,TRUE   ; string mode = true
08C7   22 F4 25               LD   (vStrMode),hl   
08CA   18 27                  JR   stringEnd1   ; save hl in vBufPtr
08CC                             ; /sbe
08CC                             ; -- str*
08CC                SBE_:        
08CC                STRINGEND:      
08CC   21 00 00               LD   hl,FALSE   ; string mode = false
08CF   22 F4 25               LD   (vStrMode),hl   
08D2   2A E8 25               LD   hl,(vBufPtr)   ; append NUL to string
08D5   AF                     XOR   a   
08D6   77                     LD   (hl),a   
08D7   23                     INC   hl   ; hl = string_end*
08D8   ED 43 08 26            LD   (vTemp1),bc   ; save IP
08DC   11 00 24               LD   de,BUFFER   ; de = string*
08DF   B7                     OR   a   ; bc = size
08E0   ED 52                  SBC   hl,de   
08E2   44 4D                  LD   bc,hl   
08E4   2A EA 25               LD   hl,(vHeapPtr)   ; hl = hstring*
08E7   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
08E8   D5                     PUSH   de   ; return hstring*
08E9   ED B0                  LDIR      ; copy size bytes from string* to hstring*
08EB   ED 53 EA 25            LD   (vHeapPtr),de   ; bump heap to hstring* += size
08EF   ED 4B 08 26            LD   bc,(vTemp1)   ; restore IP
08F3                STRINGEND1:      
08F3   21 00 24               LD   hl,BUFFER   ; reset vBufPtr
08F6   22 E8 25               LD   (vBufPtr),hl   
08F9   DD E9                  JP   (ix)   
08FB                             ; /sln
08FB                SLN_:        
08FB   D1                     POP   de   
08FC   CD E5 0F               CALL   stringLength   
08FF   E5                     PUSH   hl   
0900   DD E9                  JP   (ix)   
0902                             ; /t
0902                T_:          
0902   C3 CA 0C               JP   true1   
0905                             ; 13
0905                             ; /whi while true else break from loop
0905                             ; --
0905                WHILE_:      
0905                WHILE:       
0905   E1                     POP   hl   ; hl = condition, break if false
0906   7D                     LD   a,l   
0907   B4                     OR   h   
0908   28 02                  JR   z,while1   
090A   DD E9                  JP   (ix)   
090C                WHILE1:      
090C   FD 5D                  LD   e,iyl   ; get block* just under stack frame
090E   FD 54                  LD   d,iyh   
0910   21 08 00               LD   hl,8   
0913   19                     ADD   hl,de   
0914   23                     INC   hl   
0915   23                     INC   hl   
0916   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0919   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
091C   C3 A4 0B               JP   blockEnd   
091F                             ; /wrd
091F                WORD_:       
091F                WORDMODE:      
091F   3E 02                  LD   a,2   
0921   C3 06 0A               JP   byteMode1   
0924                             ;********************** PAGE 6 END *********************************************
0924                          ALIGN   $100   
0A00                             ;********************** PAGE 7 BEGIN *********************************************
0A00                             ; /sys
0A00                SYS_:        
0A00   DD E9                  JP   (ix)   
0A02                             ; /alloc
0A02                             ; size -- adr
0A02                ALLOC_:      
0A02                MEMALLOCATE:      
0A02   DD E9                  JP   (ix)   
0A04                             ; /byt
0A04                BYTE_:       
0A04                BYTEMODE:      
0A04   3E 01                  LD   a,1   
0A06                BYTEMODE1:      
0A06   32 F0 25               LD   (vDataWidth),a   
0A09   DD E9                  JP   (ix)   
0A0B                             ; /scp string compare
0A0B                SCMP_:       
0A0B   D1                     POP   de   
0A0C   E1                     POP   hl   
0A0D   CD D0 0F               CALL   stringCompare   
0A10   E5                     PUSH   hl   
0A11   DD E9                  JP   (ix)   
0A13                             ; select case from an associative array of cases
0A13                             ; bool cases* --
0A13                SELECT_:      
0A13   C3 CA 0A               JP   select   
0A16                             ; /voi clear out returned values
0A16                             ; ?? --
0A16                VOID_:       
0A16                VOID:        
0A16   FD 5D                  LD   e,iyl   
0A18   FD 54                  LD   d,iyh   
0A1A   EB                     EX   de,hl   
0A1B   F9                     LD   sp,hl   
0A1C   DD E9                  JP   (ix)   
0A1E                             ; /xor
0A1E                XXOR_:       
0A1E   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0A1F                XOR1:        
0A1F   E1                     POP   hl   
0A20   7B                     LD   a,e   
0A21   AD                     XOR   l   
0A22   6F                     LD   l,a   
0A23   7A                     LD   a,d   
0A24   AC                     XOR   h   
0A25   67                     LD   h,a   
0A26   C3 D4 04               JP   add3   
0A29                             ;*******************************************************************
0A29                             ; implementations continued
0A29                             ;*******************************************************************
0A29                             ; //
0A29                COMMENT:      
0A29   03                     INC   bc   ; point to next char
0A2A   0A                     LD   a,(bc)   
0A2B   FE 20                  CP   " "   ; terminate on any char less than SP
0A2D   30 FA                  JR   nc,comment   
0A2F   0B                     DEC   bc   
0A30   DD E9                  JP   (ix)   
0A32                ERROR1:      
0A32   21 01 00               LD   hl,1   ; error 1: unknown command
0A35   C3 F8 10               JP   error   
0A38                DIV1:        
0A38   E1                     POP   hl   ; hl = arg_b
0A39   D1                     POP   de   ; de = arg_a
0A3A   03                     INC   bc   
0A3B   0A                     LD   a,(bc)   
0A3C   FE 3D                  CP   "="   
0A3E   28 02                  JR   z,div2   
0A40   0B                     DEC   bc   ; /
0A41   EB                     EX   de,hl   
0A42                DIV2:        
0A42   F5                     PUSH   af   ; preserve af, bc
0A43   C5                     PUSH   bc   
0A44   44 4D                  LD   bc,hl   
0A46   CD 35 0D               CALL   divide   
0A49   EB                     EX   de,hl   
0A4A   ED 53 FC 25            LD   (vRemain),de   
0A4E   C1                     POP   bc   ; restore
0A4F   F1                     POP   af   
0A50   C3 99 04               JP   sub3   
0A53                COMMA:       
0A53   03                     INC   bc   
0A54   0A                     LD   a,(bc)   
0A55   FE 63                  CP   "c"   ; .c print char
0A57   28 07                  JR   z,readChar   
0A59   FE 73                  CP   "s"   ; .s print string
0A5B   28 0C                  JR   z,readString   
0A5D   0B                     DEC   bc   
0A5E   18 2B                  JR   readNumber   ; .  print number, fall through
0A60                READCHAR:      
0A60   CD 81 00               CALL   getchar   
0A63   26 00                  LD   h,0   
0A65   6F                     LD   l,a   
0A66   E5                     PUSH   hl   
0A67   DD E9                  JP   (ix)   
0A69                READSTRING:      
0A69   ED 5B EA 25            LD   de,(vHeapPtr)   
0A6D   D5                     PUSH   de   ; return start of string
0A6E                READSTRING1:      
0A6E   CD 81 00               CALL   getchar   
0A71   FE 0D                  CP   "\r"   
0A73   28 0D                  JR   z,readString2   
0A75   12                     LD   (de),a   
0A76   13                     INC   de   
0A77   3A F3 25               LD   a,(vEcho)   
0A7A   3C                     INC   a   
0A7B   20 F1                  JR   nz,readString1   
0A7D   CD 85 00               CALL   putchar   
0A80   18 EC                  JR   readString1   
0A82                READSTRING2:      
0A82   AF                     XOR   a   
0A83   12                     LD   (de),a   
0A84   13                     INC   de   
0A85   ED 53 EA 25            LD   (vHeapPtr),de   
0A89   DD E9                  JP   (ix)   
0A8B                READNUMBER:      
0A8B   DD E5                  PUSH   ix   
0A8D                          ;*Macro unroll:  PERFORM readString
0A8D   DD 21 94 0A            LD   ix,performM_1592S1182   
0A91   C3 69 0A               JP   readString   
0A94                PERFORMM_1592S1182:      
0A94   60 69                  LD   hl,bc   ; save bc, hl = string*
0A96   E3                     EX   (sp),hl   
0A97   22 EA 25               LD   (vHeapPtr),hl   ; restore heap* to before string
0A9A   44 4D                  LD   bc,hl   
0A9C   0A                     LD   a,(bc)   
0A9D   FE 2D                  CP   "-"   
0A9F   28 11                  JR   z,readNumber1   
0AA1   FE 24                  CP   "$"   
0AA3   28 17                  JR   z,readNumber2   
0AA5   FE 30                  CP   "0"   
0AA7   30 09                  JR   nc,readNumber1   
0AA9   FE 3A                  CP   "9"+1   
0AAB   38 05                  JR   c,readNumber1   
0AAD   21 00 00               LD   hl,0   
0AB0   18 12                  JR   readNumber3   
0AB2                READNUMBER1:      
0AB2                          ;*Macro unroll:  PERFORM num
0AB2   DD 21 B9 0A            LD   ix,performM_1609S1199   
0AB6   C3 74 0B               JP   num   
0AB9                PERFORMM_1609S1199:      
0AB9   E1                     POP   hl   
0ABA   18 08                  JR   readNumber3   
0ABC                READNUMBER2:      
0ABC                          ;*Macro unroll:  PERFORM hexNum
0ABC   DD 21 C3 0A            LD   ix,performM_1613S1203   
0AC0   C3 FB 0A               JP   hexNum   
0AC3                PERFORMM_1613S1203:      
0AC3   E1                     POP   hl   
0AC4                READNUMBER3:      
0AC4   C1                     POP   bc   
0AC5   DD E1                  POP   ix   
0AC7   E5                     PUSH   hl   
0AC8   DD E9                  JP   (ix)   
0ACA                SELECT:      
0ACA   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
0ACB   D1                     POP   de   ; de = select key
0ACC   C5                     PUSH   bc   ; save IP
0ACD   2B                     DEC   hl   ; bc = array length
0ACE   46                     LD   b,(hl)   
0ACF   2B                     DEC   hl   
0AD0   4E                     LD   c,(hl)   
0AD1   23                     INC   hl   
0AD2   23                     INC   hl   
0AD3   18 15                  JR   select2   
0AD5                SELECT1:      
0AD5   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
0AD6   BB                     CP   e   
0AD7   23                     INC   hl   ; hl++, flags are unaltered
0AD8   20 0C                  JR   nz,select1a   
0ADA   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
0ADB   BA                     CP   d   
0ADC   23                     INC   hl   ; hl++, flags are unaltered
0ADD   20 08                  JR   nz,select1b   
0ADF   5E                     LD   e,(hl)   
0AE0   23                     INC   hl   
0AE1   56                     LD   d,(hl)   
0AE2   C1                     POP   bc   
0AE3   C3 A0 05               JP   go1   
0AE6                SELECT1A:      
0AE6   23                     INC   hl   
0AE7                SELECT1B:      
0AE7   23                     INC   hl   
0AE8   23                     INC   hl   
0AE9   0B                     DEC   bc   
0AEA                SELECT2:      
0AEA   79                     LD   a,c   
0AEB   B0                     OR   b   
0AEC   20 E7                  JR   nz,select1   
0AEE   C1                     POP   bc   
0AEF   DD E9                  JP   (ix)   
0AF1                             ; ~ bitwise invert
0AF1                TILDE:       
0AF1                INVERT:      
0AF1   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0AF2   7D                     LD   a,l   
0AF3   2F                     CPL      
0AF4   6F                     LD   l,a   
0AF5   7C                     LD   a,h   
0AF6   2F                     CPL      
0AF7   67                     LD   h,a   
0AF8   C3 D4 04               JP   add3   
0AFB                             ; $ hex                         ; 22
0AFB                DOLLAR:      
0AFB                HEXNUM:      
0AFB   21 00 00               LD   hl,0   ; Clear hl to accept the number
0AFE                HEXNUM1:      
0AFE   03                     INC   bc   
0AFF   0A                     LD   a,(bc)   ; Get the character which is a numeral
0B00   CB 77                  BIT   6,a   ; is it uppercase alpha?
0B02   28 02                  JR   z,hexnum2   ; no a decimal
0B04   D6 07                  SUB   7   ; sub 7  to make $a - $F
0B06                HEXNUM2:      
0B06   D6 30                  SUB   $30   ; form decimal digit
0B08   DA 96 0B               JP   c,num2   
0B0B   FE 10                  CP   $0F+1   
0B0D   D2 96 0B               JP   nc,num2   
0B10   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0B11   29                     ADD   hl,hl   ; 4X
0B12   29                     ADD   hl,hl   ; 8X
0B13   29                     ADD   hl,hl   ; 16X
0B14   85                     ADD   a,l   ; add into bottom of hl
0B15   6F                     LD   l,a   
0B16   18 E6                  JR   hexnum1   
0B18                             ; ? if                            23
0B18                             ; condition then else -- value
0B18                QUESTION:      
0B18                IF:          
0B18   D1                     POP   de   ; de = else
0B19   E1                     POP   hl   ; hl = then
0B1A   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0B1B   7C                     LD   a,h   
0B1C   B5                     OR   l   
0B1D   E1                     POP   hl   ; hl = then
0B1E   CA A0 05               JP   z,go1   ; if z de = else
0B21   EB                     EX   de,hl   ; condition = false, de = then
0B22   C3 A0 05               JP   go1   
0B25                             ; string                        ;38
0B25                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0B25                QUOTE:       
0B25                STRING:      
0B25   2A EA 25               LD   hl,(vHeapPtr)   ; hl = heap*
0B28   E5                     PUSH   hl   ; save start of string
0B29   0A                     LD   a,(bc)   
0B2A   5F                     LD   e,a   ; e = matching terminator
0B2B   03                     INC   bc   ; point to next char
0B2C   18 03                  JR   string2   
0B2E                STRING1:      
0B2E   77                     LD   (hl),a   
0B2F   23                     INC   hl   ; increase count
0B30   03                     INC   bc   ; point to next char
0B31                STRING2:      
0B31   0A                     LD   a,(bc)   
0B32   BB                     CP   e   ; is it the string terminator
0B33   28 02                  JR   z,string3   
0B35   18 F7                  JR   string1   
0B37                STRING3:      
0B37   AF                     XOR   a   ; write NUL to terminate string
0B38   77                     LD   (hl),a   ; hl = end of string
0B39   23                     INC   hl   
0B3A   22 EA 25               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B3D   DD E9                  JP   (ix)   
0B3F                             ; %a .. %z                      43
0B3F                             ; -- value
0B3F                             ; returns value of arg
0B3F                PERCENT:      
0B3F                ARG:         
0B3F   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B42   FD 56 05               LD   d,(iy+5)   
0B45   EB                     EX   de,hl   
0B46   7D                     LD   a,l   ; arg_list* == null, skip
0B47   B4                     OR   h   
0B48   28 1A                  JR   z,arg0a   
0B4A   23                     INC   hl   ; a = num_args, hl = arg_list*
0B4B   7E                     LD   a,(hl)   
0B4C   23                     INC   hl   
0B4D   B7                     OR   a   
0B4E   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B50   5F                     LD   e,a   ; e = a = num_args
0B51   03                     INC   bc   ; a = next char = dollar_name
0B52   0A                     LD   a,(bc)   
0B53   C5                     PUSH   bc   ; save IP
0B54   43                     LD   b,e   ; b = e = num_args
0B55   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B58   FD 56 03               LD   d,(iy+3)   
0B5B                ARG0:        
0B5B   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B5C   1B                     DEC   de   
0B5D   BE                     CP   (hl)   
0B5E   28 09                  JR   z,arg1   
0B60   23                     INC   hl   ; hl = next arg_list*
0B61   10 F8                  DJNZ   arg0   
0B63   C1                     POP   bc   ; no match, restore IP
0B64                ARG0A:       
0B64   11 00 00               LD   de,0   ; return 0
0B67   18 08                  JR   arg1a   
0B69                ARG1:        
0B69   C1                     POP   bc   ; restore IP
0B6A   EB                     EX   de,hl   ; hl = arg*
0B6B   22 FA 25               LD   (vPointer),hl   ; store arg* in setter
0B6E   5E                     LD   e,(hl)   
0B6F   23                     INC   hl   
0B70   56                     LD   d,(hl)   ; de = arg
0B71                ARG1A:       
0B71   D5                     PUSH   de   ; push arg
0B72   DD E9                  JP   (ix)   
0B74                             ; 0..9 number                   37
0B74                NUM:         
0B74   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B77   0A                     LD   a,(bc)   ; Get numeral or -
0B78   FE 2D                  CP   "-"   
0B7A   20 01                  JR   nz,num0   
0B7C   03                     INC   bc   ; move to next char, no flags affected
0B7D                NUM0:        
0B7D   08                     EX   af,af'   ; save zero flag = 0 for later
0B7E                NUM1:        
0B7E   0A                     LD   a,(bc)   ; read digit
0B7F   D6 30                  SUB   "0"   ; less than 0?
0B81   38 13                  JR   c,num2   ; not a digit, exit loop
0B83   FE 0A                  CP   10   ; greater that 9?
0B85   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B87   03                     INC   bc   ; inc IP
0B88   54 5D                  LD   de,hl   ; multiply hl * 10
0B8A   29                     ADD   hl,hl   
0B8B   29                     ADD   hl,hl   
0B8C   19                     ADD   hl,de   
0B8D   29                     ADD   hl,hl   
0B8E   85                     ADD   a,l   ; add digit in a to hl
0B8F   6F                     LD   l,a   
0B90   3E 00                  LD   a,0   
0B92   8C                     ADC   a,h   
0B93   67                     LD   h,a   
0B94   18 E8                  JR   num1   
0B96                NUM2:        
0B96   0B                     DEC   bc   
0B97   08                     EX   af,af'   ; restore zero flag
0B98   20 07                  JR   nz,num3   
0B9A   EB                     EX   de,hl   ; negate the value of hl
0B9B   21 00 00               LD   hl,0   
0B9E   B7                     OR   a   ; jump to sub2
0B9F   ED 52                  SBC   hl,de   
0BA1                NUM3:        
0BA1   E5                     PUSH   hl   ; Put the number on the stack
0BA2   DD E9                  JP   (ix)   ; and process the next character
0BA4                             ; }                               58
0BA4                RBRACE:      
0BA4                BLOCKEND:      
0BA4   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BA7   FD 56 01               LD   d,(iy+1)   
0BAA   ED 53 08 26            LD   (vTemp1),de   
0BAE   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BB1   FD 56 07               LD   d,(iy+7)   
0BB4   ED 53 0A 26            LD   (vTemp2),de   
0BB8   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BBB   FD 56 03               LD   d,(iy+3)   
0BBE   EB                     EX   de,hl   
0BBF   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BC2   FD 56 01               LD   d,(iy+1)   
0BC5   13                     INC   de   ; for carry flag <=
0BC6   B7                     OR   a   
0BC7   ED 52                  SBC   hl,de   
0BC9   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BCB   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BCD   FD 5D                  LD   e,iyl   
0BCF   21 08 00               LD   hl,8   
0BD2   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BD3   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BD4   18 0C                  JR   blockEnd2   
0BD6                BLOCKEND1:      ; same scope
0BD6   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BD9   FD 56 03               LD   d,(iy+3)   
0BDC   EB                     EX   de,hl   
0BDD   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BDF   FD 5D                  LD   e,iyl   
0BE1   EB                     EX   de,hl   
0BE2                BLOCKEND2:      
0BE2   44 4D                  LD   bc,hl   ; bc = hl = BP
0BE4   B7                     OR   a   ; hl = BP - SP = count
0BE5   ED 72                  SBC   hl,sp   
0BE7   7D                     LD   a,l   
0BE8   B4                     OR   h   
0BE9   28 09                  JR   z,blockEnd3   
0BEB   C5                     PUSH   bc   ; bc = count, hl = BP
0BEC   44 4D                  LD   bc,hl   
0BEE   E1                     POP   hl   
0BEF   2B                     DEC   hl   ; hl = BP-1
0BF0   1B                     DEC   de   ; de = args*-1
0BF1   ED B8                  LDDR      
0BF3   13                     INC   de   
0BF4                BLOCKEND3:      
0BF4   EB                     EX   de,hl   ; sp = de = new tos*
0BF5   F9                     LD   sp,hl   
0BF6   ED 4B 0A 26            LD   bc,(vTemp2)   
0BFA   FD 2A 08 26            LD   iy,(vTemp1)   
0BFE   ED 5B EE 25            LD   de,(vRecurPtr)   ; de = recur vector
0C02   7B                     LD   a,e   ; check for NUL
0C03   B2                     OR   d   
0C04   20 02                  JR   nz,blockEnd4   
0C06   DD E9                  JP   (ix)   
0C08                BLOCKEND4:      
0C08   21 00 00               LD   hl,0   ; clear recur vector
0C0B   22 EE 25               LD   (vRecurPtr),hl   
0C0E   C3 A0 05               JP   go1   ; execute de
0C11                GOBLOCK:      
0C11   ED 53 08 26            LD   (vTemp1),de   ; save de
0C15   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C18   FD 54                  LD   d,iyh   
0C1A   FD 5D                  LD   e,iyl   
0C1C   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C1D   ED 52                  SBC   hl,de   
0C1F   ED 5B 08 26            LD   de,(vTemp1)   ; restore de
0C23   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C24   B4                     OR   h   
0C25   3E 00                  LD   a,0   
0C27   28 6A                  JR   z,goFunc8   
0C29   C5                     PUSH   bc   ; push IP
0C2A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C2D   FD 46 05               LD   b,(iy+5)   
0C30   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C33   FD 66 03               LD   h,(iy+3)   
0C36                GOBLOCK2:      
0C36   C5                     PUSH   bc   ; arg_list*
0C37   E5                     PUSH   hl   ; first_arg*
0C38   FD E5                  PUSH   iy   ; push BP
0C3A   FD 21 00 00            LD   iy,0   ; BP = SP
0C3E   FD 39                  ADD   iy,sp   
0C40                GOBLOCK3:      
0C40   42 4B                  LD   bc,de   ; bc = de = block*-1
0C42   DD E9                  JP   (ix)   
0C44                GOFUNC:      ; execute func
0C44   EB                     EX   de,hl   ; hl = func*
0C45   5E                     LD   e,(hl)   ; de = partial_array*
0C46   23                     INC   hl   
0C47   56                     LD   d,(hl)   
0C48   23                     INC   hl   
0C49   7B                     LD   a,e   ; if partial_array* == null skip
0C4A   B2                     OR   d   
0C4B   28 21                  JR   z,goFunc3   
0C4D   ED 43 08 26            LD   (vTemp1),bc   
0C51   22 0A 26               LD   (vTemp2),hl   ; save bc,hl
0C54   EB                     EX   de,hl   ; hl = partial_array*
0C55   2B                     DEC   hl   ; bc = count
0C56   46                     LD   b,(hl)   
0C57   2B                     DEC   hl   
0C58   4E                     LD   c,(hl)   
0C59   23                     INC   hl   ; hl = array data*
0C5A   23                     INC   hl   
0C5B   18 06                  JR   goFunc2   ; push each item on stack
0C5D                GOFUNC1:      
0C5D   5E                     LD   e,(hl)   ; de = partial item
0C5E   23                     INC   hl   
0C5F   56                     LD   d,(hl)   
0C60   23                     INC   hl   
0C61   D5                     PUSH   de   ; push on stack
0C62   0B                     DEC   bc   
0C63                GOFUNC2:      
0C63   79                     LD   a,c   ; if count != 0 then loop
0C64   B0                     OR   b   
0C65   20 F6                  JR   nz,goFunc1   
0C67   ED 4B 08 26            LD   bc,(vTemp1)   ; restore bc
0C6B   2A 0A 26               LD   hl,(vTemp2)   ; restore hl
0C6E                GOFUNC3:      
0C6E   5E                     LD   e,(hl)   ; de = block*
0C6F   23                     INC   hl   
0C70   56                     LD   d,(hl)   
0C71   23                     INC   hl   
0C72   ED 53 08 26            LD   (vTemp1),de   ; save block*
0C76   5E                     LD   e,(hl)   ; de = arg_list*
0C77   23                     INC   hl   
0C78   56                     LD   d,(hl)   
0C79   23                     INC   hl   
0C7A   EB                     EX   de,hl   ; hl = arg_list*
0C7B   ED 5B 08 26            LD   de,(vTemp1)   ; restore de = block*
0C7F   7D                     LD   a,l   ; if arg_list* == null a = 0
0C80   B4                     OR   h   
0C81   20 03                  JR   nz,goFunc4   
0C83   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C84   18 0D                  JR   goFunc8   
0C86                GOFUNC4:      ; allocate locals
0C86   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C87   18 03                  JR   goFunc6   
0C89                GOFUNC5:      ; loop
0C89   3B                     DEC   sp   
0C8A   3B                     DEC   sp   
0C8B   3D                     DEC   a   
0C8C                GOFUNC6:      
0C8C   B7                     OR   a   
0C8D   20 FA                  JR   nz,goFunc5   ; end loop
0C8F                GOFUNC7:      
0C8F   23                     INC   hl   ; a = num_args* x 2
0C90   7E                     LD   a,(hl)   
0C91   2B                     DEC   hl   
0C92   87                     ADD   a,a   ; a *= 2
0C93                GOFUNC8:      
0C93   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C94   44 4D                  LD   bc,hl   
0C96   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C99   85                     ADD   a,l   
0C9A   6F                     LD   l,a   
0C9B   39                     ADD   hl,sp   
0C9C   18 98                  JR   goBlock2   
0C9E                             ; =                              21
0C9E                             ; value _oldValue --            ; uses address in vPointer 15
0C9E                ASSIGN:      
0C9E   E1                     POP   hl   ; discard last accessed value
0C9F   E1                     POP   hl   ; hl = new value
0CA0                ASSIGN0:      
0CA0   EB                     EX   de,hl   ; de = new value
0CA1   2A FA 25               LD   hl,(vPointer)   
0CA4                ASSIGN1:      ; entry point from defineEnd
0CA4   73                     LD   (hl),e   
0CA5   3A F0 25               LD   a,(vDataWidth)   
0CA8   3D                     DEC   a   ; is it byte?
0CA9   28 02                  JR   z,assign2   
0CAB   23                     INC   hl   
0CAC   72                     LD   (hl),d   
0CAD                ASSIGN2:      
0CAD   DD E9                  JP   (ix)   
0CAF                             ; hl = value1, de = value2
0CAF                             ; hl = result
0CAF                EQUALS:      
0CAF   B7                     OR   a   ; reset the carry flag
0CB0   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0CB2   28 16                  JR   z,true1   
0CB4   18 1A                  JR   false1   
0CB6                NOTEQUALS:      
0CB6   B7                     OR   a   ; reset the carry flag
0CB7   ED 52                  SBC   hl,de   
0CB9   20 0F                  JR   nz,true1   
0CBB   18 13                  JR   false1   
0CBD                             ; hl = value1 de = value2
0CBD                             ; hl = result
0CBD                LESSTHANEQ:      
0CBD   B7                     OR   a   
0CBE   ED 52                  SBC   hl,de   
0CC0   18 05                  JR   lessthan1   
0CC2                             ; hl = value1 de = value2
0CC2                             ; hl = result
0CC2                LESSTHAN:      
0CC2   B7                     OR   a   
0CC3   ED 52                  SBC   hl,de   
0CC5   28 09                  JR   z,false1   
0CC7                LESSTHAN1:      
0CC7   FA D0 0C               JP   m,false1   
0CCA                TRUE1:       
0CCA   21 FF FF               LD   hl,TRUE   
0CCD   E5                     PUSH   hl   
0CCE   DD E9                  JP   (ix)   
0CD0                NULL1:       
0CD0                FALSE1:      
0CD0   21 00 00               LD   hl,FALSE   
0CD3   E5                     PUSH   hl   
0CD4   DD E9                  JP   (ix)   
0CD6                SPREAD:      
0CD6   E1                     POP   hl   ; hl = array*
0CD7   ED 43 08 26            LD   (vTemp1),bc   ; save bc
0CDB   2B                     DEC   hl   ; bc = length
0CDC   46                     LD   b,(hl)   
0CDD   2B                     DEC   hl   
0CDE   4E                     LD   c,(hl)   
0CDF   23                     INC   hl   ; move back to array 0
0CE0   23                     INC   hl   
0CE1   18 0D                  JR   spread3   
0CE3                SPREAD1:      
0CE3   5E                     LD   e,(hl)   ; e = lsb data at hl
0CE4   23                     INC   hl   
0CE5   3A F0 25               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0CE8   57                     LD   d,a   
0CE9   15                     DEC   d   
0CEA   28 02                  JR   z,spread2   
0CEC   56                     LD   d,(hl)   ; d = msb data at hl
0CED   23                     INC   hl   
0CEE                SPREAD2:      
0CEE   D5                     PUSH   de   ; return de
0CEF   0B                     DEC   bc   ; count--
0CF0                SPREAD3:      
0CF0   79                     LD   a,c   ; exit loop if bc == 0
0CF1   B0                     OR   b   
0CF2   20 EF                  JR   nz,spread1   
0CF4   ED 4B 08 26            LD   bc,(vTemp1)   ; restore bc
0CF8   DD E9                  JP   (ix)   
0CFA                             ; shiftLeft
0CFA                             ; value count <<
0CFA                             ; count variable <<=
0CFA                SHIFTLEFT:      
0CFA   E1                     POP   hl   ; de = arg_a, hl = arg_b
0CFB   D1                     POP   de   
0CFC   03                     INC   bc   
0CFD   0A                     LD   a,(bc)   
0CFE   FE 3D                  CP   "="   
0D00   28 02                  JR   z,shiftLeft2   
0D02   0B                     DEC   bc   
0D03   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0D04                SHIFTLEFT2:      
0D04   ED 43 08 26            LD   (vTemp1),bc   ; save IP
0D08   43                     LD   b,e   ; b = loop counter
0D09   04                     INC   b   ; test for counter=0 case
0D0A   18 01                  JR   shiftLeft4   
0D0C                SHIFTLEFT3:      
0D0C   29                     ADD   hl,hl   ; left shift hl
0D0D                SHIFTLEFT4:      
0D0D   10 FD                  DJNZ   shiftLeft3   
0D0F   ED 4B 08 26            LD   bc,(vTemp1)   ; restore IP
0D13   C3 99 04               JP   sub3   
0D16                             ; shiftRight
0D16                             ; value count >>
0D16                             ; count variable >>=
0D16                SHIFTRIGHT:      
0D16   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D17   D1                     POP   de   
0D18   03                     INC   bc   
0D19   0A                     LD   a,(bc)   
0D1A   FE 3D                  CP   "="   
0D1C   28 02                  JR   z,shiftRight2   
0D1E   0B                     DEC   bc   
0D1F   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0D20                SHIFTRIGHT2:      
0D20   ED 43 08 26            LD   (vTemp1),bc   ; save IP
0D24   43                     LD   b,e   ; b = loop counter
0D25   04                     INC   b   ; test for counter=0 case
0D26   18 04                  JR   shiftRight4   
0D28                SHIFTRIGHT3:      
0D28   CB 3C                  SRL   h   ; right shift hl
0D2A   CB 1D                  RR   l   
0D2C                SHIFTRIGHT4:      
0D2C   10 FA                  DJNZ   shiftRight3   
0D2E   ED 4B 08 26            LD   bc,(vTemp1)   ; restore IP
0D32   C3 99 04               JP   sub3   
0D35                             ; division subroutine.
0D35                             ; bc: divisor, de: dividend, hl: remainder
0D35                DIVIDE:      
0D35   21 00 00               LD   hl,0   ; zero the remainder
0D38   3E 10                  LD   a,16   ; loop counter
0D3A                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0D3A   CB 21                  SLA   c   
0D3C   CB 10                  RL   b   
0D3E   ED 6A                  ADC   hl,hl   
0D40   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0D42   38 03                  JR   c,divide2   
0D44   0C                     INC   c   
0D45   18 01                  JR   divide3   
0D47                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0D47   19                     ADD   hl,de   
0D48                DIVIDE3:      
0D48   3D                     DEC   a   
0D49   20 EF                  JR   nz,divide1   
0D4B   50 59                  LD   de,bc   ; result from bc to de
0D4D   C9                     RET      
0D4E                DOTNEXT:      
0D4E   3A F4 25               LD   a,(vStrMode)   ; if string mode then exit
0D51   3C                     INC   a   
0D52   20 02                  JR   nz,dotNext1   
0D54   DD E9                  JP   (ix)   
0D56                DOTNEXT1:      
0D56   11 00 24               LD   de,BUFFER   
0D59   2A E8 25               LD   hl,(vBufPtr)   
0D5C   36 00                  LD   (hl),0   ; store NUL at end of string
0D5E   ED 53 E8 25            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0D62   EB                     EX   de,hl   ; hl = BUFFER
0D63   CD 19 0F               CALL   putstr   
0D66   DD E9                  JP   (ix)   
0D68                             ; arg_list - parses arg_list e.g. ab:c
0D68                             ; -- arg_list*
0D68                PARSEARGS:      
0D68   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0D6B   2A EA 25               LD   hl,(vHeapPtr)   ; hl = heap*
0D6E   E5                     PUSH   hl   ; save start of arg_list
0D6F   23                     INC   hl   ; skip length fields to start of string
0D70   23                     INC   hl   
0D71   03                     INC   bc   ; point to next char
0D72                PARSEARGS1:      
0D72   0A                     LD   a,(bc)   
0D73   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D75   20 03                  JR   nz,parseArgs1a   
0D77   14                     INC   d   ; non zero value local count acts as flag
0D78   18 10                  JR   parseArgs3   
0D7A                PARSEARGS1A:      
0D7A   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D7C   38 0F                  JR   c,parseArgs4   
0D7E   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D80   30 0B                  JR   nc,parseArgs4   
0D82                PARSEARGS2:      
0D82   77                     LD   (hl),a   
0D83   23                     INC   hl   
0D84   1C                     INC   e   ; increase arg count
0D85   AF                     XOR   a   
0D86   B2                     OR   d   
0D87   28 01                  JR   z,parseArgs3   
0D89   14                     INC   d   ; if d > 0 increase local count
0D8A                PARSEARGS3:      
0D8A   03                     INC   bc   ; point to next char
0D8B   18 E5                  JR   parseArgs1   
0D8D                PARSEARGS4:      
0D8D   0B                     DEC   bc   
0D8E   AF                     XOR   a   
0D8F   B2                     OR   d   
0D90   28 01                  JR   z,parseArgs5   
0D92   15                     DEC   d   ; remove initial inc
0D93                PARSEARGS5:      
0D93   23                     INC   hl   
0D94   22 EA 25               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D97   E1                     POP   hl   ; hl = start of arg_list
0D98   72                     LD   (hl),d   ; write number of locals at start - 1
0D99   23                     INC   hl   
0D9A   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D9B   2B                     DEC   hl   
0D9C   E3                     EX   (sp),hl   
0D9D   E9                     JP   (hl)   
0D9E                             ; create block: parses block e.g. 00bbIC4uLi4g
0D9E                             ; -- block*
0D9E                PARSEBLOCK:      
0D9E   C5                     PUSH   bc   ; return pointer to first { of block
0D9F   03                     INC   bc   
0DA0   16 01                  LD   d,1   ; nesting: count first parenthesis
0DA2                PARSEBLOCK1:      ; Skip to end of definition
0DA2   0A                     LD   a,(bc)   ; Get the next character
0DA3   03                     INC   bc   ; Point to next character
0DA4   FE 21                  CP   " " + 1   ; ignore whitespace
0DA6   38 FA                  JR   c,parseBlock1   
0DA8   FE 27                  CP   "'"   ; quote char
0DAA   28 0F                  JR   z,parseBlock2   
0DAC   FE 22                  CP   DQ   ; double quote char
0DAE   28 0B                  JR   z,parseBlock2   
0DB0   FE 60                  CP   "`"   ; grave char
0DB2   28 07                  JR   z,parseBlock2   
0DB4   CB 7A                  BIT   7,d   
0DB6   20 EA                  JR   nz,parseBlock1   
0DB8   C3 C1 0D               JP   parseBlock3   
0DBB                PARSEBLOCK2:      
0DBB   3E 80                  LD   a,$80   
0DBD   AA                     XOR   d   
0DBE   57                     LD   d,a   
0DBF   18 E1                  JR   parseBlock1   
0DC1                PARSEBLOCK3:      
0DC1   FE 28                  CP   "("   
0DC3   28 16                  JR   z,parseBlock4   
0DC5   FE 7B                  CP   "{"   
0DC7   28 12                  JR   z,parseBlock4   
0DC9   FE 5B                  CP   "["   
0DCB   28 0E                  JR   z,parseBlock4   
0DCD   FE 29                  CP   ")"   
0DCF   28 0D                  JR   z,parseBlock5   
0DD1   FE 7D                  CP   "}"   
0DD3   28 09                  JR   z,parseBlock5   
0DD5   FE 5D                  CP   "]"   
0DD7   28 05                  JR   z,parseBlock5   
0DD9   18 C7                  JR   parseBlock1   
0DDB                PARSEBLOCK4:      
0DDB   14                     INC   d   
0DDC   18 C4                  JR   parseBlock1   
0DDE                PARSEBLOCK5:      
0DDE   15                     DEC   d   
0DDF   20 C1                  JR   nz,parseBlock1   ; get the next element
0DE1   60 69                  LD   hl,bc   ; hl = IP
0DE3   11 26 26               LD   de,HEAP   ; is IP pointing to object in heap
0DE6   B7                     OR   a   ; IP - HEAP
0DE7   ED 52                  SBC   hl,de   
0DE9   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0DEB   28 1C                  JR   z,parseBlock6   
0DED   60 69                  LD   hl,bc   ; hl = IP
0DEF   D1                     POP   de   ; de = block*
0DF0   ED 43 08 26            LD   (vTemp1),bc   ; save IP
0DF4   B7                     OR   a   ; bc = size
0DF5   ED 52                  SBC   hl,de   
0DF7   44 4D                  LD   bc,hl   
0DF9   EB                     EX   de,hl   ; hl = block* de = heap*
0DFA   ED 5B EA 25            LD   de,(vHeapPtr)   
0DFE   D5                     PUSH   de   ; return hblock*
0DFF   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0E01   ED 53 EA 25            LD   (vHeapPtr),de   ; heap* += size
0E05   ED 4B 08 26            LD   bc,(vTemp1)   ; restore IP
0E09                PARSEBLOCK6:      
0E09   0B                     DEC   bc   ; balanced, exit
0E0A   E1                     POP   hl   ; hl = block*
0E0B   E3                     EX   (sp),hl   ; return to caller
0E0C   E9                     JP   (hl)   
0E0D                             ; create function
0E0D                             ; arg_list* block* -- func*
0E0D                CREATEFUNC:      
0E0D   E1                     POP   hl   ; save retrn address
0E0E   22 0C 26               LD   (vTemp3),hl   
0E11   ED 43 08 26            LD   (vTemp1),bc   ; save IP
0E15   E1                     POP   hl   ; hl = block*
0E16   22 0A 26               LD   (vTemp2),hl   ; save block*
0E19   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0E1C   FD 56 05               LD   d,(iy+5)   
0E1F   7B                     LD   a,e   ; if arg_list == null then make a func
0E20   B2                     OR   d   
0E21   20 09                  JR   nz,createFunc0   
0E23   21 00 00               LD   hl,0   ; partial_array = null
0E26   ED 5B EA 25            LD   de,(vHeapPtr)   ; de = compile*
0E2A   18 65                  JR   createFunc5   
0E2C                CREATEFUNC0:      
0E2C   E1                     POP   hl   ; hl = inner_arg_list*
0E2D   E5                     PUSH   hl   ; save inner_arg_list
0E2E   ED 5B EA 25            LD   de,(vHeapPtr)   ; de = compile*
0E32   7E                     LD   a,(hl)   ; compile inner_num_locals
0E33   4F                     LD   c,a   ; b = inner_num_locals
0E34   12                     LD   (de),a   
0E35   23                     INC   hl   
0E36   13                     INC   de   
0E37   7E                     LD   a,(hl)   ; compile inner_length
0E38   12                     LD   (de),a   
0E39   91                     SUB   c   ; a = inner_num args
0E3A   23                     INC   hl   
0E3B   13                     INC   de   
0E3C   B7                     OR   a   ; compile args if inner_length > 0
0E3D   28 05                  JR   z,createFunc1   
0E3F   4F                     LD   c,a   ; bc = a
0E40   06 00                  LD   b,0   
0E42   ED B0                  LDIR      
0E44                CREATEFUNC1:      
0E44   EB                     EX   de,hl   ; hl = outer_arg_list
0E45   FD 5E 04               LD   e,(iy+4)   
0E48   FD 56 05               LD   d,(iy+5)   
0E4B   EB                     EX   de,hl   
0E4C   23                     INC   hl   ; a = outer_length
0E4D   7E                     LD   a,(hl)   
0E4E   23                     INC   hl   
0E4F   B7                     OR   a   
0E50   28 05                  JR   z,createFunc2   
0E52   4F                     LD   c,a   
0E53   06 00                  LD   b,0   
0E55   ED B0                  LDIR      ; append outer_args
0E57                CREATEFUNC2:      ; a = outer_length
0E57   47                     LD   b,a   ; b = a = outer_length
0E58   2A EA 25               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0E5B   23                     INC   hl   
0E5C   7E                     LD   a,(hl)   ; add outer_length to new length
0E5D   80                     ADD   a,b   
0E5E   77                     LD   (hl),a   
0E5F   2B                     DEC   hl   
0E60   78                     LD   a,b   ; save outer_length in a'
0E61   08                     EX   af,af'   
0E62   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0E63   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0E64   B7                     OR   a   
0E65   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0E67   4F                     LD   c,a   ; c = inner_num_locals
0E68   06 00                  LD   b,0   ; bc = inner_num_locals
0E6A   23                     INC   hl   ; a = inner_length
0E6B   7E                     LD   a,(hl)   
0E6C   91                     SUB   c   ; a = inner_num_args
0E6D   23                     INC   hl   ; hl = inner_arg_chars
0E6E   85                     ADD   a,l   ; hl += a
0E6F   6F                     LD   l,a   
0E70   3E 00                  LD   a,0   
0E72   84                     ADD   a,h   
0E73   67                     LD   h,a   
0E74   ED B0                  LDIR      ; append inner_locals
0E76                CREATEFUNC2A:      
0E76   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E77   12                     LD   (de),a   ; compile partial_array length field
0E78   13                     INC   de   
0E79   AF                     XOR   a   
0E7A   12                     LD   (de),a   
0E7B   13                     INC   de   
0E7C   D5                     PUSH   de   ; push partial_array*
0E7D   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E7E   FD 5E 02               LD   e,(iy+2)   
0E81   FD 56 03               LD   d,(iy+3)   
0E84   EB                     EX   de,hl   
0E85                CREATEFUNC3:      
0E85   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E86   4E                     LD   c,(hl)   
0E87   2B                     DEC   hl   
0E88   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E89   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E8A   13                     INC   de   
0E8B   79                     LD   a,c   
0E8C   12                     LD   (de),a   
0E8D   13                     INC   de   
0E8E   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E90                CREATEFUNC4:      
0E90   E1                     POP   hl   ; hl = partial_array*
0E91                CREATEFUNC5:      
0E91   C1                     POP   bc   ; bc = new_arg_list*
0E92   D5                     PUSH   de   ; return new func*
0E93   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E94   73                     LD   (hl),e   ; compile partial_array* to func
0E95   23                     INC   hl   
0E96   72                     LD   (hl),d   
0E97   23                     INC   hl   
0E98   ED 5B 0A 26            LD   de,(vTemp2)   ; de = block*
0E9C   73                     LD   (hl),e   ; compile block* to func
0E9D   23                     INC   hl   
0E9E   72                     LD   (hl),d   
0E9F   23                     INC   hl   
0EA0   71                     LD   (hl),c   ; compile new_arg_list* to func
0EA1   23                     INC   hl   
0EA2   70                     LD   (hl),b   
0EA3   23                     INC   hl   
0EA4   22 EA 25               LD   (vHeapPtr),hl   ; bump heap ptr
0EA7   ED 4B 08 26            LD   bc,(vTemp1)   ; restore IP
0EAB   2A 0C 26               LD   hl,(vTemp3)   ; jump to return address
0EAE   E9                     JP   (hl)   
0EAF                             ;*******************************************************************
0EAF                             ; general routines
0EAF                             ;*******************************************************************
0EAF                             ; hl = address
0EAF                VARIABLE:      
0EAF   22 FA 25               LD   (vPointer),hl   
0EB2   5E                     LD   e,(hl)   
0EB3   3A F0 25               LD   a,(vDataWidth)   
0EB6   3D                     DEC   a   
0EB7   16 00                  LD   d,0   
0EB9   28 03                  JR   z,constant   
0EBB   23                     INC   hl   
0EBC   56                     LD   d,(hl)   
0EBD   2B                     DEC   hl   
0EBE                CONSTANT:      
0EBE   D5                     PUSH   de   
0EBF   DD E9                  JP   (ix)   
0EC1                             ; followed by a table
0EC1                             ; indexed on the 0-25 lowercase letter
0EC1                             ; db lsb(addr)
0EC1                             ; the final item index 26 matches any other char
0EC1                CHARTABLE:      
0EC1   03                     INC   bc   
0EC2   0A                     LD   a,(bc)   
0EC3   FE 7B                  CP   "z"+1   
0EC5   30 10                  JR   nc,charTable3   
0EC7   D6 61                  SUB   "a"   
0EC9   38 0C                  JR   c,charTable3   
0ECB                CHARTABLE1:      
0ECB   E1                     POP   hl   
0ECC   85                     ADD   a,l   
0ECD   6F                     LD   l,a   
0ECE   7E                     LD   a,(hl)   ; must have the same msb as the table
0ECF   B7                     OR   a   ; a = 0, nop
0ED0   20 03                  JR   nz,charTable2   
0ED2   C3 32 0A               JP   error1   
0ED5                CHARTABLE2:      
0ED5   6F                     LD   l,a   
0ED6   E9                     JP   (hl)   
0ED7                CHARTABLE3:      
0ED7   3E 1A                  LD   a,26   
0ED9   0B                     DEC   bc   
0EDA   18 EF                  JR   charTable1   
0EDC                             ; 8-bit hash string
0EDC                             ; bc = str
0EDC                             ; a = hash
0EDC                IDENTHASH:      
0EDC   16 00                  LD   d,0   
0EDE                IDENTHASH1:      
0EDE   0A                     LD   a,(bc)   ; e = a = char
0EDF   D6 61                  SUB   "a"   ; is char < "a"
0EE1   30 03                  JR   nc,identHash2   
0EE3   0B                     DEC   bc   
0EE4   7A                     LD   a,d   
0EE5   C9                     RET      
0EE6                IDENTHASH2:      ; not white space
0EE6   5F                     LD   e,a   
0EE7   7A                     LD   a,d   ; a = d = hash
0EE8   87                     ADD   a,a   ; a *= 2
0EE9   83                     ADD   a,e   ; a += char
0EEA   57                     LD   d,a   ; d = a
0EEB   03                     INC   bc   ; ip++
0EEC   18 F0                  JR   identHash1   
0EEE                             ; a = index
0EEE                             ; hl = default
0EEE                COMMANDTABLE:      
0EEE   E3                     EX   (sp),hl   ; hl = table* (sp) = default*
0EEF   54                     LD   d,h   ; d = msb(table*) + 1
0EF0   14                     INC   d   
0EF1   FE 80                  CP   $80   ; index > $80
0EF3   38 01                  JR   c,commandTable2   
0EF5   14                     INC   d   ; d = msb(table*) + 2
0EF6                COMMANDTABLE2:      
0EF6   85                     ADD   a,l   ; hl = dest**
0EF7   6F                     LD   l,a   
0EF8   5E                     LD   e,(hl)   ; e = lsb(dest*)
0EF9   B7                     OR   a   ; if zero use default*
0EFA   C8                     RET   z   
0EFB   EB                     EX   de,hl   ; hl = dest*
0EFC   D1                     POP   de   ; pop default*
0EFD   E9                     JP   (hl)   
0EFE                GETVARADDR:      
0EFE   21 00 00               LD   hl,0   
0F01   FE 7B                  CP   "z"+1   ; if a > z then exit
0F03   D0                     RET   nc   
0F04   D6 41                  SUB   "A"   ; a - 65
0F06   D8                     RET   c   ; if < A then exit
0F07   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0F09   38 05                  JR   c,getVarAddr1   
0F0B   D6 06                  SUB   "a"-("Z"+1)   
0F0D   FE 1A                  CP   "Z"-"A"+1   
0F0F   D8                     RET   c   ; if < a then exit
0F10                GETVARADDR1:      
0F10   87                     ADD   a,a   ; double a
0F11   6F                     LD   l,a   
0F12   26 25                  LD   h,msb(VARS)   
0F14   C9                     RET      
0F15                PUTSTR0:      
0F15   CD 85 00               CALL   putchar   
0F18   23                     INC   hl   
0F19                PUTSTR:      
0F19   7E                     LD   a,(hl)   
0F1A   B7                     OR   a   
0F1B   20 F8                  JR   nz,putstr0   
0F1D   C9                     RET      
0F1E                             ; hl = value
0F1E                             ; de = buffer*
0F1E                             ; a, bc, de, hl destroyed
0F1E                FORMATDEC0:      
0F1E   E5                     PUSH   hl   
0F1F   D9                     EXX      
0F20   E1                     POP   hl   
0F21                             ; hl = value
0F21                             ; de' = buffer*
0F21                             ; a, bc, de, hl destroyed
0F21                FORMATDEC:      
0F21   CB 7C                  BIT   7,h   
0F23   28 0C                  JR   z,formatDec2   
0F25   D9                     EXX      
0F26   3E 2D                  LD   a,"-"   
0F28   12                     LD   (de),a   
0F29   13                     INC   de   
0F2A   D9                     EXX      
0F2B   AF                     XOR   a   
0F2C   95                     SUB   l   
0F2D   6F                     LD   l,a   
0F2E   9F                     SBC   a,a   
0F2F   94                     SUB   h   
0F30   67                     LD   h,a   
0F31                FORMATDEC2:      
0F31   0E 00                  LD   c,0   ; leading zeros flag = false
0F33   11 F0 D8               LD   de,-10000   
0F36   CD 51 0F               CALL   formatDec4   
0F39   11 18 FC               LD   de,-1000   
0F3C   CD 51 0F               CALL   formatDec4   
0F3F   11 9C FF               LD   de,-100   
0F42   CD 51 0F               CALL   formatDec4   
0F45   1E F6                  LD   e,-10   
0F47   CD 51 0F               CALL   formatDec4   
0F4A   0C                     INC   c   ; flag = true for at least digit
0F4B   1E FF                  LD   e,-1   
0F4D   CD 51 0F               CALL   formatDec4   
0F50   C9                     RET      
0F51                FORMATDEC4:      
0F51   06 2F                  LD   b,"0"-1   
0F53                FORMATDEC5:      
0F53   04                     INC   b   
0F54   19                     ADD   hl,de   
0F55   38 FC                  JR   c,formatDec5   
0F57   ED 52                  SBC   hl,de   
0F59   3E 30                  LD   a,"0"   
0F5B   B8                     CP   b   
0F5C   20 05                  JR   nz,formatDec6   
0F5E   AF                     XOR   a   
0F5F   B1                     OR   c   
0F60   C8                     RET   z   
0F61   18 01                  JR   formatDec7   
0F63                FORMATDEC6:      
0F63   0C                     INC   c   
0F64                FORMATDEC7:      
0F64   78                     LD   a,b   
0F65   D9                     EXX      
0F66   12                     LD   (de),a   
0F67   13                     INC   de   
0F68   D9                     EXX      
0F69   C9                     RET      
0F6A                             ; **************************************************************************
0F6A                             ; calculate nesting value
0F6A                             ; a is char to be tested,
0F6A                             ; e is the nesting value (initially 0)
0F6A                             ; e is increased by ( and [
0F6A                             ; e is decreased by ) and ]
0F6A                             ; e has its bit 7 toggled by `
0F6A                             ; limited to 127 levels
0F6A                             ; **************************************************************************
0F6A                NESTING:      
0F6A   FE 27                  CP   "'"   ; quote char
0F6C   28 0A                  JR   z,nesting0   
0F6E   FE 22                  CP   DQ   ; double quote char
0F70   28 06                  JR   z,nesting0   
0F72   FE 60                  CP   "`"   ; grave char
0F74   28 02                  JR   z,nesting0   
0F76   18 0A                  JR   nesting1   
0F78                NESTING0:      
0F78   CB 7B                  BIT   7,e   
0F7A   28 03                  JR   z,nesting1a   
0F7C   CB BB                  RES   7,e   
0F7E   C9                     RET      
0F7F                NESTING1A:      
0F7F   CB FB                  SET   7,e   
0F81   C9                     RET      
0F82                NESTING1:      
0F82   CB 7B                  BIT   7,e   
0F84   C0                     RET   nz   
0F85   FE 7B                  CP   "{"   
0F87   28 08                  JR   z,nesting2   
0F89   FE 5B                  CP   "["   
0F8B   28 04                  JR   z,nesting2   
0F8D   FE 28                  CP   "("   
0F8F   20 02                  JR   nz,nesting3   
0F91                NESTING2:      
0F91   1C                     INC   e   
0F92   C9                     RET      
0F93                NESTING3:      
0F93   FE 7D                  CP   "}"   
0F95   28 07                  JR   z,nesting4   
0F97   FE 5D                  CP   "]"   
0F99   28 03                  JR   z,nesting4   
0F9B   FE 29                  CP   ")"   
0F9D   C0                     RET   nz   
0F9E                NESTING4:      
0F9E   1D                     DEC   e   
0F9F   C9                     RET      
0FA0                PROMPT:      
0FA0   CD B0 0F               CALL   printStr   
0FA3   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0FA8   C9                     RET      
0FA9                CRLF:        
0FA9   CD B0 0F               CALL   printStr   
0FAC   0D 0A 00               .CSTR   "\r\n"   
0FAF   C9                     RET      
0FB0                             ; prints a null teminated string
0FB0                             ; the string should be immediately following the call
0FB0                PRINTSTR:      
0FB0   E3                     EX   (sp),hl   ; swap			
0FB1   CD 19 0F               CALL   putstr   
0FB4   23                     INC   hl   ; inc past NUL
0FB5   E3                     EX   (sp),hl   ; put it back	
0FB6   C9                     RET      
0FB7                             ; hl = number to print in decimal
0FB7                PRINTNUM:      
0FB7   ED 5B E8 25            LD   de,(vBufPtr)   ; de' = buffer*
0FBB   CD 1E 0F               CALL   formatDec0   
0FBE   D9                     EXX      ; restore de = buffer*
0FBF   3E 00                  LD   a,0   ; append NUL to buffer
0FC1   12                     LD   (de),a   
0FC2   13                     INC   de   ; string*++,
0FC3   ED 53 E8 25            LD   (vBufPtr),de   ; update buffer* with buffer*'
0FC7   21 00 24               LD   hl,BUFFER   
0FCA   22 E8 25               LD   (vBufPtr),hl   ; reset vBufPtr to vHeapPtr
0FCD   C3 19 0F               JP   putstr   
0FD0                             ; Compares two null terminated strings.
0FD0                             ; de = string1* hl = string2* -- bool
0FD0                             ; returns: hl = bool
0FD0                STRINGCOMPARE:      
0FD0                STRINGCOMPARE1:      
0FD0   1A                     LD   a,(de)   
0FD1   BE                     CP   (hl)   
0FD2   20 07                  JR   nz,stringCompare2   
0FD4   B7                     OR   a   
0FD5   28 09                  JR   z,stringCompare3   
0FD7   13                     INC   de   
0FD8   23                     INC   hl   
0FD9   18 F5                  JR   stringCompare1   
0FDB                STRINGCOMPARE2:      
0FDB   21 00 00               LD   hl,FALSE   
0FDE   18 03                  JR   stringCompare4   
0FE0                STRINGCOMPARE3:      
0FE0   21 FF FF               LD   hl,TRUE   
0FE3                STRINGCOMPARE4:      
0FE3   E5                     PUSH   hl   
0FE4   C9                     RET      
0FE5                             ; string length
0FE5                             ; de = string*
0FE5                             ; returns: hl = length
0FE5                STRINGLENGTH:      
0FE5   21 00 00               LD   hl,0   
0FE8   18 02                  JR   stringLength2   
0FEA                STRINGLENGTH1:      
0FEA   13                     INC   de   
0FEB   23                     INC   hl   
0FEC                STRINGLENGTH2:      
0FEC   1A                     LD   a,(de)   
0FED   B7                     OR   a   
0FEE   20 FA                  JR   nz,stringLength1   
0FF0                STRINGLENGTH3:      
0FF0   C9                     RET      
0FF1                             ; 
0FF1                             ; ASMOV interpreter
0FF1                             ; 
0FF1                INIT:        
0FF1   21 92 01               LD   hl,titleStr   
0FF4   11 12 26               LD   de,titleBuf   
0FF7   06 14                  LD   b,20   
0FF9                INIT1:       
0FF9   1A                     LD   a,(de)   
0FFA   BE                     CP   (hl)   
0FFB   20 17                  JR   nz,coldBoot0   
0FFD   13                     INC   de   
0FFE   23                     INC   hl   
0FFF   10 F8                  DJNZ   init1   
1001                WARMINIT:      
1001   ED 4B FE 25            LD   bc,(vSavedIP)   ; restore IP
1005   ED 7B 00 26            LD   sp,(vSavedDSP)   ; restore Data SP
1009   FD 2A 02 26            LD   iy,(vSavedRSP)   ; restore Return SP
100D   DD 2A 04 26            LD   ix,(vSavedNext)   ; restore Next
1011   C3 4B 10               JP   start1   
1014                COLDBOOT0:      
1014   21 92 01               LD   hl,titleStr   ; copy titleStr to titleBuf
1017   11 12 26               LD   de,titleBuf   
101A   06 14                  LD   b,20   
101C   ED B0                  LDIR      
101E                COLDINIT:      
101E   21 80 01               LD   hl,isysVars   
1021   11 E6 25               LD   de,sysVars   
1024   01 12 00               LD   bc,4 * 2 + 10   
1027   ED B0                  LDIR      
1029   21 00 25               LD   hl,vars   ; 52 vars LO HI
102C   06 34                  LD   b,26*2   
102E   AF                     XOR   a   
102F                COLDBOOT1:      
102F   77                     LD   (hl),a   
1030   23                     INC   hl   
1031   10 FC                  DJNZ   coldBoot1   
1033   DD 21 C7 10            LD   ix,NEXT   
1037   FD 21 00 21            LD   iy,STACK   
103B   C9                     RET      
103C                COLDSTART:      
103C   31 00 21               LD   sp,STACK   
103F   CD 14 10               CALL   coldBoot0   
1042   C3 4B 10               JP   start1   
1045                START:       
1045   31 00 21               LD   sp,STACK   ; start ASMOV
1048   CD F1 0F               CALL   init   ; setups
104B                START1:      
104B   21 12 26               LD   hl,titleBuf   
104E   CD 19 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
1051                INTERPRET:      
1051   CD A0 0F               CALL   prompt   
1054   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
1057   21 00 23               LD   hl,TIB   
105A   22 E6 25               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
105D                INTERPRET2:      ; calculate nesting
105D   1E 00                  LD   e,0   ; initilize nesting value
105F   C5                     PUSH   bc   ; save offset into TIB,
1060                             ; bc is also the count of chars in TIB
1060   21 00 23               LD   hl,TIB   ; hl is start of TIB
1063   18 06                  JR   interpret4   
1065                INTERPRET3:      
1065   7E                     LD   a,(hl)   ; a = char in TIB
1066   23                     INC   hl   ; inc pointer into TIB
1067   0B                     DEC   bc   ; dec count of chars in TIB
1068   CD 6A 0F               CALL   nesting   ; update nesting value
106B                INTERPRET4:      
106B   79                     LD   a,c   ; is count zero?
106C   B0                     OR   b   
106D   20 F6                  JR   nz,interpret3   ; if not loop
106F   C1                     POP   bc   ; restore offset into TIB
1070                INTERPRET5:      
1070   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
1073   FE 20                  CP   $20   ; compare to space
1075   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
1077   FE 00                  CP   NUL   ; is it end of string? NUL end of string
1079   28 31                  JR   z,interpret8   
107B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
107D   28 1A                  JR   z,interpret7   ; if anything else its macro/control
107F   FE 08                  CP   CTRL_H   
1081   CA 0A 11               JP   z,backSpace_   
1084   FE 0A                  CP   CTRL_J   
1086   CA 1A 11               JP   z,reEdit_   
1089                INTERPRET5A:      
1089   18 D2                  JR   interpret2   
108B                INTERPRET6:      
108B   21 00 23               LD   hl,TIB   
108E   09                     ADD   hl,bc   
108F   77                     LD   (hl),a   ; store the character in textbuf
1090   03                     INC   bc   
1091   CD 85 00               CALL   putchar   ; echo character to screen
1094   CD 6A 0F               CALL   nesting   
1097   18 D7                  JR   interpret5   ; wait for next character
1099                INTERPRET7:      
1099   21 00 23               LD   hl,TIB   
109C   09                     ADD   hl,bc   
109D   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
109F   23                     INC   hl   
10A0   36 0A                  LD   (hl),"\n"   
10A2   23                     INC   hl   
10A3   03                     INC   bc   
10A4   03                     INC   bc   
10A5   CD A9 0F               CALL   crlf   ; echo character to screen
10A8   7B                     LD   a,e   ; if zero nesting append and ETX after \r
10A9   B7                     OR   a   
10AA   20 C4                  JR   nz,interpret5   
10AC                INTERPRET8:      
10AC   21 00 23               LD   hl,TIB   
10AF   09                     ADD   hl,bc   
10B0   22 E6 25               LD   (vTIBPtr),hl   
10B3   01 00 23               LD   bc,TIB   
10B6   ED 43 FE 25            LD   (vSavedIP),bc   ; save IP
10BA   ED 73 00 26            LD   (vSavedDSP),sp   ; save Data SP
10BE   FD 22 02 26            LD   (vSavedRSP),iy   ; save Return SP
10C2   DD 22 04 26            LD   (vSavedNext),ix   ; save Next
10C6   0B                     DEC   bc   
10C7                NEXT:        
10C7   03                     INC   bc   ; Increment the IP
10C8   0A                     LD   a,(bc)   ; Get the next character and dispatch
10C9   FE 20                  CP   " "   ; whitespace?
10CB   28 FA                  JR   z,next   ; space? ignore
10CD   38 1A                  JR   c,next1   
10CF   50 59                  LD   de,bc   ; de = token start
10D1   13                     INC   de   
10D2                NEXT0:       
10D2   03                     INC   bc   ; bc = first char
10D3   0A                     LD   a,(bc)   
10D4   FE 21                  CP   " "+1   
10D6   38 FA                  JR   c,next0   
10D8   60 69                  LD   hl,bc   
10DA   B7                     OR   a   
10DB   ED 52                  SBC   hl,de   
10DD   EB                     EX   de,hl   ; hl = tok, de = len
10DE   C5                     PUSH   bc   
10DF   43                     LD   b,e   
10E0   CD 3A 11               CALL   hash   
10E3   C1                     POP   bc   
10E4   6F                     LD   l,a   ; index into table
10E5   26 03                  LD   h,msb(opcodes)   ; start address of jump table
10E7   6E                     LD   l,(hl)   ; get low jump address
10E8   E9                     JP   (hl)   ; Jump to routine
10E9                NEXT1:       
10E9   FE 00                  CP   NUL   ; end of input string?
10EB   28 03                  JR   z,exit   
10ED   C3 51 10               JP   interpret   ; no, other whitespace, macros?
10F0                EXIT:        
10F0   03                     INC   bc   
10F1   60 69                  LD   hl,bc   
10F3   E9                     JP   (hl)   
10F4                RUN:         
10F4   C1                     POP   bc   
10F5   0B                     DEC   bc   
10F6   DD E9                  JP   (ix)   
10F8                ERROR:       
10F8   E5                     PUSH   hl   
10F9   CD F4 10               CALL   run   
10FC   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
1107   C3 51 10               JP   interpret   
110A                BACKSPACE_:      
110A   79                     LD   a,c   
110B   B0                     OR   b   
110C   CA 5D 10               JP   z,interpret2   
110F   0B                     DEC   bc   
1110   CD B0 0F               CALL   printStr   
1113   08 20 08 00            .CSTR   "\b \b"   
1117   C3 5D 10               JP   interpret2   
111A                REEDIT_:      
111A   CD B0 0F               CALL   printStr   
111D   0D 3E 20 00            .CSTR   "\r> "   
1121   21 00 23               LD   hl,TIB   
1124   18 04                  JR   reEdit1   
1126                REEDIT0:      
1126   CD 85 00               CALL   putchar   
1129   23                     INC   hl   
112A                REEDIT1:      
112A   7E                     LD   a,(hl)   
112B   FE 0D                  CP   "\r"   
112D   20 F7                  JR   nz,reEdit0   
112F   11 00 23               LD   de,TIB   
1132   B7                     OR   a   
1133   ED 52                  SBC   hl,de   
1135   44 4D                  LD   bc,hl   
1137   C3 5D 10               JP   interpret2   
113A                             ; hash
113A                             ; hl = str
113A                             ; de = len
113A                             ; returns a = hash
113A                HASH:        
113A   AF                     XOR   a   ; hash = zero
113B   B8                     CP   b   ; does b == zero ?
113C   C8                     RET   z   ; yes execute with hash = 0
113D   16 02                  LD   d,msb(pearson)   ; page aligned pearson table
113F                HASH1:       
113F   4E                     LD   c,(hl)   ; c = str[hl++]
1140   23                     INC   hl   
1141   A9                     XOR   c   ; hash = pearson[hash ^ c]
1142   5F                     LD   e,a   
1143   1A                     LD   a,(de)   
1144   10 F9                  DJNZ   hash1   ; loop
1146   C9                     RET      
1147                ANSIPRINTSEQ:      
1147   CD B0 0F               CALL   printStr   
114A   1B 5B 00               DB   ESC,"[",0   
114D   C9                     RET      
114E                             ; clears screen and sets cursor to 0,0
114E                ANSICLEARSCREEN:      
114E   CD B0 0F               CALL   printStr   
1151   1B 5B                  DB   ESC,"["   
1153   32 4A 00               DB   "2J",0   ; falls through
1156                             ; call ansiPrintStr
1156                             ; .cstr "H"
1156   C9                     RET      
1157                             ; a = 0:toEnd 1:toStart 2:entireLine
1157                ANSICLEARLINE:      
1157   C6 30                  ADD   a,"0"   ; ascii
1159   08                     EX   af,af'   ; save a
115A   CD 47 11               CALL   ansiPrintSeq   
115D   08                     EX   af,af'   ; restore
115E   CD 85 00               CALL   putChar   
1161   3E 4B                  LD   a,"K"   
1163   C3 85 00               JP   putChar   
1166                             ; h = column, l = row
1166                ANSIGOTO:      
1166   D9                     EXX      ; save hl
1167   CD 47 11               CALL   ansiPrintSeq   
116A   D9                     EXX      ; restore hl
116B   7C                     LD   a,h   ; save column
116C   08                     EX   af,af'   
116D   26 00                  LD   h,0   ; print row
116F   CD B7 0F               CALL   printNum   
1172   3E 3B                  LD   a,";"   
1174   CD 85 00               CALL   putChar   
1177   08                     EX   af,af'   ; restore column
1178   6C                     LD   l,h   ; print column
1179   26 00                  LD   h,0   
117B   CD B7 0F               CALL   printNum   
117E   3E 48                  LD   a,"H"   
1180   C3 85 00               JP   putChar   
1183                             ; h = "A":Up "B":Down "C":Forward "D":Back
1183                             ; l = amount
1183                ANSIMOVE:      
1183   D9                     EXX      ; save hl
1184   CD 47 11               CALL   ansiPrintSeq   
1187   D9                     EXX      ; restore hl
1188   7C                     LD   a,h   
1189   08                     EX   af,af'   ; save a
118A   26 00                  LD   h,0   ; print amount
118C   CD B7 0F               CALL   printNum   
118F   08                     EX   af,af'   ; restore a
1190   C3 85 00               JP   putChar   ; print direction code
1193                             ; a = 0:normal 1:bold 2:low 4:underline 5:blink 7:reverse
1193                ANSITEXTSTYLE:      
1193   C6 30                  ADD   a,"0"   ; ascii
1195   08                     EX   af,af'   ; save a
1196   CD 47 11               CALL   ansiPrintSeq   
1199   08                     EX   af,af'   ; restore
119A   CD 85 00               CALL   putChar   
119D   3E 6D                  LD   a,"m"   
119F   C3 85 00               JP   putChar   
11A2                             ; a = "h":show "l":hide
11A2                ANSICURSORSHOW:      
11A2   08                     EX   af,af'   ; save a
11A3   CD B0 0F               CALL   printStr   
11A6   1B 5B                  DB   ESC,"["   
11A8   3F 32 35 00            DB   "?25",0   
11AC   08                     EX   af,af'   ; restore
11AD   C3 85 00               JP   putChar   
11B0                             ; 
2000                          .ORG   RAMSTART   
2000                DSTACK_SIZE:   EQU   $100   ; Data stack size
2000                RSTACK_SIZE:   EQU   $100   ; Return stack size
2000                NAMES_SIZE:   EQU   $100   ; Arg names size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   DSTACK_SIZE   
2100                STACK:       
2100                DSTACK:      
2100                RSTACK:      
2100                          DS   RSTACK_SIZE   
2200                NAMES:       
2200                          DS   NAMES_SIZE   
2300                          ALIGN   $100   
2300                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2400                          ALIGN   $100   
2400                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2500                          ALIGN   $100   
2500                VARS:        
2500                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
25D0                RESTARTS:      
25D0                RST08:    DS   2   
25D2                RST10:    DS   2   
25D4                RST18:    DS   2   
25D6                RST20:    DS   2   
25D8                RST28:    DS   2   
25DA                RST30:    DS   2   ; 
25DC                BAUD:     DS   2   ; 
25DE                INTVEC:   DS   2   ; 
25E0                NMIVEC:   DS   2   ; 
25E2                GETCVEC:   DS   2   ; 
25E4                PUTCVEC:   DS   2   ; 
25E6                SYSVARS:      
25E6                             ; initialised sys variables (preserved)
25E6                VTIBPTR:   DS   2   
25E8                VBUFPTR:   DS   2   
25EA                VHEAPPTR:   DS   2   
25EC                VNAMESPTR:   DS   2   
25EE                VRECURPTR:   DS   2   
25F0                VDATAWIDTH:   DS   1   
25F1                VNUMBASE:   DS   1   
25F2                VHEXPREFIX:   DS   1   
25F3                VECHO:    DS   1   
25F4                VSTRMODE:   DS   1   
25F5                          DS   1   
25F6                          DS   1   
25F7                          DS   1   
25F8                          DS   1   
25F9                          DS   1   
25FA                             ; uninitialised sys variables (preserved)
25FA                VPOINTER:   DS   2   ; 
25FC                VREMAIN:   DS   2   ; 
25FE                VSAVEDIP:   DS   2   ; 
2600                VSAVEDDSP:   DS   2   ; 
2602                VSAVEDRSP:   DS   2   ; 
2604                VSAVEDNEXT:   DS   2   ; 
2606                VSAVEDBP:   DS   2   ; 
2608                             ; uninitialised sys variables (unpreserved)
2608                VTEMP1:   DS   2   ; 
260A                VTEMP2:   DS   2   ; 
260C                VTEMP3:   DS   2   ; 
260E                          DS   2   ; 
2610                TBPTR:    DS   2   ; reserved for tests
2612                TITLEBUF:   DS   20   
2626                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 47 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 12
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 77 IN MAIN.asm
                    > USED AT LINE 3 IN ansi.asm
                    > USED AT LINE 9 IN ansi.asm
                    > USED AT LINE 70 IN ansi.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 21 IN ansi.asm
                    > USED AT LINE 23 IN ansi.asm
                    > USED AT LINE 35 IN ansi.asm
                    > USED AT LINE 41 IN ansi.asm
                    > USED AT LINE 54 IN ansi.asm
                    > USED AT LINE 62 IN ansi.asm
                    > USED AT LINE 64 IN ansi.asm
                    > USED AT LINE 73 IN ansi.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 15 IN MAIN.asm
                    > USED AT LINE 66 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 67 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 19 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 20 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 23 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 24 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 25 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 57 IN MAIN.asm
                    > USED AT LINE 2302 IN MAIN.asm
TITLESTR:           0192 DEFINED AT LINE 76 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
PEARSON:            0200 DEFINED AT LINE 82 IN MAIN.asm
OPCODES:            0300 DEFINED AT LINE 92 IN MAIN.asm
RLA_:               0400 DEFINED AT LINE 105 IN MAIN.asm
OUTI_:              0400 DEFINED AT LINE 106 IN MAIN.asm
INDR_:              0400 DEFINED AT LINE 107 IN MAIN.asm
IND_:               0400 DEFINED AT LINE 108 IN MAIN.asm
RL_:                0400 DEFINED AT LINE 109 IN MAIN.asm
CP_:                0400 DEFINED AT LINE 110 IN MAIN.asm
EX_:                0400 DEFINED AT LINE 111 IN MAIN.asm
IN_:                0400 DEFINED AT LINE 112 IN MAIN.asm
EI_:                0400 DEFINED AT LINE 113 IN MAIN.asm
INC_:               0400 DEFINED AT LINE 114 IN MAIN.asm
LDIR_:              0400 DEFINED AT LINE 115 IN MAIN.asm
DEC_:               0400 DEFINED AT LINE 116 IN MAIN.asm
ADD_:               0400 DEFINED AT LINE 117 IN MAIN.asm
                    > USED AT LINE 94 IN MAIN.asm
SLA_:               0400 DEFINED AT LINE 118 IN MAIN.asm
EXX_:               0400 DEFINED AT LINE 119 IN MAIN.asm
RRC_:               0400 DEFINED AT LINE 120 IN MAIN.asm
OR_:                0400 DEFINED AT LINE 121 IN MAIN.asm
IM_:                0400 DEFINED AT LINE 122 IN MAIN.asm
OTDR_:              0400 DEFINED AT LINE 123 IN MAIN.asm
DI_:                0400 DEFINED AT LINE 124 IN MAIN.asm
JR_:                0400 DEFINED AT LINE 125 IN MAIN.asm
SRA_:               0400 DEFINED AT LINE 126 IN MAIN.asm
NEG_:               0400 DEFINED AT LINE 127 IN MAIN.asm
CCF_:               0400 DEFINED AT LINE 128 IN MAIN.asm
AND_:               0400 DEFINED AT LINE 129 IN MAIN.asm
RES_:               0400 DEFINED AT LINE 130 IN MAIN.asm
CPDR_:              0400 DEFINED AT LINE 131 IN MAIN.asm
SCF_:               0400 DEFINED AT LINE 132 IN MAIN.asm
RST_:               0400 DEFINED AT LINE 133 IN MAIN.asm
POP_:               0400 DEFINED AT LINE 134 IN MAIN.asm
RETI_:              0400 DEFINED AT LINE 135 IN MAIN.asm
LDD_:               0400 DEFINED AT LINE 136 IN MAIN.asm
OUTD_:              0400 DEFINED AT LINE 137 IN MAIN.asm
                    > USED AT LINE 97 IN MAIN.asm
RRD_:               0400 DEFINED AT LINE 138 IN MAIN.asm
                    > USED AT LINE 97 IN MAIN.asm
ADC_:               0400 DEFINED AT LINE 139 IN MAIN.asm
RETN_:              0400 DEFINED AT LINE 140 IN MAIN.asm
RLC_:               0400 DEFINED AT LINE 141 IN MAIN.asm
SUB_:               0400 DEFINED AT LINE 142 IN MAIN.asm
CPI_:               0400 DEFINED AT LINE 143 IN MAIN.asm
CALL_:              0400 DEFINED AT LINE 144 IN MAIN.asm
OUT_:               0400 DEFINED AT LINE 145 IN MAIN.asm
XOR_:               0400 DEFINED AT LINE 146 IN MAIN.asm
LD_:                0400 DEFINED AT LINE 147 IN MAIN.asm
RLD_:               0400 DEFINED AT LINE 148 IN MAIN.asm
DJNZ_:              0400 DEFINED AT LINE 149 IN MAIN.asm
CPIR_:              0400 DEFINED AT LINE 150 IN MAIN.asm
SET_:               0400 DEFINED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 94 IN MAIN.asm
PUSH_:              0400 DEFINED AT LINE 152 IN MAIN.asm
INI_:               0400 DEFINED AT LINE 153 IN MAIN.asm
RRA_:               0400 DEFINED AT LINE 154 IN MAIN.asm
BIT_:               0400 DEFINED AT LINE 155 IN MAIN.asm
LDDR_:              0400 DEFINED AT LINE 156 IN MAIN.asm
SLL_:               0400 DEFINED AT LINE 157 IN MAIN.asm
DAA_:               0400 DEFINED AT LINE 158 IN MAIN.asm
OTIR_:              0400 DEFINED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 99 IN MAIN.asm
CPD_:               0400 DEFINED AT LINE 160 IN MAIN.asm
RRCA_:              0400 DEFINED AT LINE 161 IN MAIN.asm
INIR_:              0400 DEFINED AT LINE 162 IN MAIN.asm
CPL_:               0400 DEFINED AT LINE 163 IN MAIN.asm
RR_:                0400 DEFINED AT LINE 164 IN MAIN.asm
JP_:                0400 DEFINED AT LINE 165 IN MAIN.asm
HALT_:              0400 DEFINED AT LINE 166 IN MAIN.asm
SBC_:               0400 DEFINED AT LINE 167 IN MAIN.asm
NOP_:               0400 DEFINED AT LINE 168 IN MAIN.asm
RLCA_:              0400 DEFINED AT LINE 169 IN MAIN.asm
RET_:               0400 DEFINED AT LINE 170 IN MAIN.asm
SRL_:               0400 DEFINED AT LINE 171 IN MAIN.asm
LDI_:               0400 DEFINED AT LINE 172 IN MAIN.asm
COLON_:             0400 DEFINED AT LINE 177 IN MAIN.asm
HASH_:              0400 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0402 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0405 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            0408 DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             0408 DEFINED AT LINE 188 IN MAIN.asm
DOT_:               040B DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           040E DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0411 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0414 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             0417 DEFINED AT LINE 203 IN MAIN.asm
NUM_:               041A DEFINED AT LINE 206 IN MAIN.asm
BANG_:              041D DEFINED AT LINE 209 IN MAIN.asm
BANG:               041D DEFINED AT LINE 210 IN MAIN.asm
NOT:                0428 DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                042E DEFINED AT LINE 222 IN MAIN.asm
EQ:                 042E DEFINED AT LINE 223 IN MAIN.asm
EQ0:                0438 DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                0439 DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                043D DEFINED AT LINE 236 IN MAIN.asm
GT:                 043D DEFINED AT LINE 237 IN MAIN.asm
LT_:                0448 DEFINED AT LINE 245 IN MAIN.asm
LT:                 0448 DEFINED AT LINE 246 IN MAIN.asm
LT1:                0451 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SEMICOLON_:         045A DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON:          045A DEFINED AT LINE 262 IN MAIN.asm
ARRAYINDEX:         045A DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX0:        0462 DEFINED AT LINE 269 IN MAIN.asm
ARRAYINDEX1:        0463 DEFINED AT LINE 271 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
RPAREN_:            0467 DEFINED AT LINE 276 IN MAIN.asm
RPAREN:             0467 DEFINED AT LINE 278 IN MAIN.asm
AMPER_:             046F DEFINED AT LINE 286 IN MAIN.asm
AMPER:              046F DEFINED AT LINE 287 IN MAIN.asm
AND:                046F DEFINED AT LINE 288 IN MAIN.asm
MINUS_:             0479 DEFINED AT LINE 306 IN MAIN.asm
MINUS:              0479 DEFINED AT LINE 307 IN MAIN.asm
SUB:                0485 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
SUB1:               048F DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
SUB2:               0496 DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
SUB3:               0499 DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
STAR_:              04A1 DEFINED AT LINE 337 IN MAIN.asm
STAR:               04A1 DEFINED AT LINE 338 IN MAIN.asm
MUL:                04A9 DEFINED AT LINE 344 IN MAIN.asm
MUL2:               04AB DEFINED AT LINE 347 IN MAIN.asm
MUL3:               04B3 DEFINED AT LINE 352 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
PLUS_:              04C5 DEFINED AT LINE 367 IN MAIN.asm
PLUS:               04C5 DEFINED AT LINE 368 IN MAIN.asm
ADD:                04C5 DEFINED AT LINE 369 IN MAIN.asm
ADD1:               04D0 DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
ADD3:               04D4 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
ADD4:               04DE DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
UPCASE_:            04E1 DEFINED AT LINE 394 IN MAIN.asm
UPCASE:             04E1 DEFINED AT LINE 395 IN MAIN.asm
LOWCASE_:           0500 DEFINED AT LINE 404 IN MAIN.asm
LOWCASE:            0500 DEFINED AT LINE 405 IN MAIN.asm
IDENT1:             0505 DEFINED AT LINE 409 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
LBRACK_:            0512 DEFINED AT LINE 421 IN MAIN.asm
LBRACK:             0512 DEFINED AT LINE 422 IN MAIN.asm
ARRAYSTART:         0512 DEFINED AT LINE 423 IN MAIN.asm
BACKSLASH_:         052E DEFINED AT LINE 438 IN MAIN.asm
BACKSLASH:          052E DEFINED AT LINE 439 IN MAIN.asm
LAMBDA:             052E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA1:            0533 DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
LAMBDA2:            0543 DEFINED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
RBRACK_:            054F DEFINED AT LINE 460 IN MAIN.asm
RBRACK:             054F DEFINED AT LINE 461 IN MAIN.asm
ARRAYEND:           054F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND1:          056B DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ARRAYEND2:          057B DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
ARRAYEND3:          0580 DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
CARET_:             059F DEFINED AT LINE 514 IN MAIN.asm
CARET:              059F DEFINED AT LINE 518 IN MAIN.asm
GO:                 059F DEFINED AT LINE 519 IN MAIN.asm
GO1:                05A0 DEFINED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
GO2:                05A6 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
GRAVE_:             05B5 DEFINED AT LINE 535 IN MAIN.asm
GRAVE:              05B5 DEFINED AT LINE 536 IN MAIN.asm
PRINTLITERAL:       05B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL0:      05BC DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
PRINTLITERAL1:      05BF DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE_:            05CB DEFINED AT LINE 552 IN MAIN.asm
LBRACE:             05CB DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              05D0 DEFINED AT LINE 559 IN MAIN.asm
PIPE:               05D0 DEFINED AT LINE 560 IN MAIN.asm
OR:                 05D0 DEFINED AT LINE 561 IN MAIN.asm
RBRACE_:            05DB DEFINED AT LINE 572 IN MAIN.asm
TILDE_:             05DE DEFINED AT LINE 576 IN MAIN.asm
UNDERSCORE_:        05E1 DEFINED AT LINE 579 IN MAIN.asm
CHAR:               05E1 DEFINED AT LINE 580 IN MAIN.asm
AT_:                05E9 DEFINED AT LINE 588 IN MAIN.asm
AT:                 05E9 DEFINED AT LINE 589 IN MAIN.asm
ADDR:               05E9 DEFINED AT LINE 590 IN MAIN.asm
DOT:                0600 DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0600 DEFINED AT LINE 602 IN MAIN.asm
PRINTARRAY:         0611 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
PRINTCHAR:          0614 DEFINED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0623 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       062A DEFINED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
PRINTSTRING1:       062D DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
PRINTNUMBER:        0638 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0643 DEFINED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
PRINTDEC1:          0651 DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTHEX:           0660 DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
PRINTHEX1:          066C DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
PRINTHEX2:          0677 DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
PRINTHEX3:          0686 DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
PRINTHEX4:          068F DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 704 IN MAIN.asm
SLASH:              0700 DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0700 DEFINED AT LINE 722 IN MAIN.asm
ABS_:               0810 DEFINED AT LINE 752 IN MAIN.asm
ABSOLUTE:           0810 DEFINED AT LINE 753 IN MAIN.asm
ABSOLUTE1:          081B DEFINED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
ALN_:               081E DEFINED AT LINE 771 IN MAIN.asm
ARRAYLENGTH:        081E DEFINED AT LINE 772 IN MAIN.asm
ARRAYLENGTH1:       0824 DEFINED AT LINE 779 IN MAIN.asm
ARGS_:              0827 DEFINED AT LINE 784 IN MAIN.asm
BYE_:               0829 DEFINED AT LINE 788 IN MAIN.asm
CGO_:               082C DEFINED AT LINE 793 IN MAIN.asm
CURSORGO:           082C DEFINED AT LINE 794 IN MAIN.asm
CLS_:               0834 DEFINED AT LINE 803 IN MAIN.asm
CLEARSCREEN:        0834 DEFINED AT LINE 804 IN MAIN.asm
VAR_:               0839 DEFINED AT LINE 809 IN MAIN.asm
CLL_:               083B DEFINED AT LINE 815 IN MAIN.asm
CLEARLINE:          083B DEFINED AT LINE 816 IN MAIN.asm
CMV_:               0844 DEFINED AT LINE 825 IN MAIN.asm
CURSORMOVE:         0844 DEFINED AT LINE 826 IN MAIN.asm
CURSORMOVE1:        0850 DEFINED AT LINE 835 IN MAIN.asm
CUR_:               0852 DEFINED AT LINE 840 IN MAIN.asm
CURSORSHOW:         0852 DEFINED AT LINE 841 IN MAIN.asm
CURSORSHOW1:        085C DEFINED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
DECBASE:            0861 DEFINED AT LINE 853 IN MAIN.asm
DECBASE1:           0863 DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
DIV_:               0868 DEFINED AT LINE 860 IN MAIN.asm
ECHO_:              086B DEFINED AT LINE 865 IN MAIN.asm
ECHO:               086B DEFINED AT LINE 866 IN MAIN.asm
F_:                 0871 DEFINED AT LINE 872 IN MAIN.asm
FRAC_:              0874 DEFINED AT LINE 876 IN MAIN.asm
REMAIN:             0874 DEFINED AT LINE 877 IN MAIN.asm
FREE_:              087A DEFINED AT LINE 884 IN MAIN.asm
MEMFREE:            087A DEFINED AT LINE 885 IN MAIN.asm
MEMFREE1:           087B DEFINED AT LINE 887 IN MAIN.asm
HEX_:               0880 DEFINED AT LINE 891 IN MAIN.asm
INPUT:              0885 DEFINED AT LINE 898 IN MAIN.asm
MAX_:               0890 DEFINED AT LINE 910 IN MAIN.asm
MAXIMUM:            0890 DEFINED AT LINE 911 IN MAIN.asm
MAXIMUM1:           089A DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
MIN_:               089C DEFINED AT LINE 925 IN MAIN.asm
MINIMUM:            089C DEFINED AT LINE 926 IN MAIN.asm
MINIMUM1:           08A6 DEFINED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
NIL_:               08A8 DEFINED AT LINE 939 IN MAIN.asm
OUTPUT:             08AB DEFINED AT LINE 944 IN MAIN.asm
RECUR_:             08B4 DEFINED AT LINE 954 IN MAIN.asm
RECUR:              08B4 DEFINED AT LINE 955 IN MAIN.asm
RETURN_:            08BA DEFINED AT LINE 962 IN MAIN.asm
RETURN:             08BA DEFINED AT LINE 963 IN MAIN.asm
RETURN1:            08C1 DEFINED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
SBB_:               08C4 DEFINED AT LINE 973 IN MAIN.asm
STRINGBEGIN:        08C4 DEFINED AT LINE 974 IN MAIN.asm
SBE_:               08CC DEFINED AT LINE 981 IN MAIN.asm
STRINGEND:          08CC DEFINED AT LINE 982 IN MAIN.asm
STRINGEND1:         08F3 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
SLN_:               08FB DEFINED AT LINE 1006 IN MAIN.asm
T_:                 0902 DEFINED AT LINE 1013 IN MAIN.asm
WHILE_:             0905 DEFINED AT LINE 1019 IN MAIN.asm
WHILE:              0905 DEFINED AT LINE 1020 IN MAIN.asm
WHILE1:             090C DEFINED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
WORD_:              091F DEFINED AT LINE 1038 IN MAIN.asm
WORDMODE:           091F DEFINED AT LINE 1039 IN MAIN.asm
SYS_:               0A00 DEFINED AT LINE 1048 IN MAIN.asm
ALLOC_:             0A02 DEFINED AT LINE 1053 IN MAIN.asm
MEMALLOCATE:        0A02 DEFINED AT LINE 1054 IN MAIN.asm
BYTE_:              0A04 DEFINED AT LINE 1058 IN MAIN.asm
BYTEMODE:           0A04 DEFINED AT LINE 1059 IN MAIN.asm
BYTEMODE1:          0A06 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
SCMP_:              0A0B DEFINED AT LINE 1067 IN MAIN.asm
SELECT_:            0A13 DEFINED AT LINE 1076 IN MAIN.asm
VOID_:              0A16 DEFINED AT LINE 1081 IN MAIN.asm
VOID:               0A16 DEFINED AT LINE 1082 IN MAIN.asm
XXOR_:              0A1E DEFINED AT LINE 1090 IN MAIN.asm
XOR1:               0A1F DEFINED AT LINE 1092 IN MAIN.asm
COMMENT:            0A29 DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
ERROR1:             0A32 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
DIV1:               0A38 DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
DIV2:               0A42 DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
COMMA:              0A53 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0A60 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
READSTRING:         0A69 DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 43
READSTRING1:        0A6E DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
READSTRING2:        0A82 DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
READNUMBER:         0A8B DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
PERFORMM_1592S1182: 0A94 DEFINED AT LINE 44
                    > USED AT LINE 42
READNUMBER1:        0AB2 DEFINED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
PERFORMM_1609S1199: 0AB9 DEFINED AT LINE 44
                    > USED AT LINE 42
READNUMBER2:        0ABC DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
PERFORMM_1613S1203: 0AC3 DEFINED AT LINE 44
                    > USED AT LINE 42
READNUMBER3:        0AC4 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
SELECT:             0ACA DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
SELECT1:            0AD5 DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
SELECT1A:           0AE6 DEFINED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
SELECT1B:           0AE7 DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
SELECT2:            0AEA DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
TILDE:              0AF1 DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
INVERT:             0AF1 DEFINED AT LINE 1251 IN MAIN.asm
DOLLAR:             0AFB DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0AFB DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 43
HEXNUM1:            0AFE DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
HEXNUM2:            0B06 DEFINED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
QUESTION:           0B18 DEFINED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0B18 DEFINED AT LINE 1287 IN MAIN.asm
QUOTE:              0B25 DEFINED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0B25 DEFINED AT LINE 1301 IN MAIN.asm
STRING1:            0B2E DEFINED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
STRING2:            0B31 DEFINED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
STRING3:            0B37 DEFINED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
PERCENT:            0B3F DEFINED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0B3F DEFINED AT LINE 1328 IN MAIN.asm
ARG0:               0B5B DEFINED AT LINE 1347 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
ARG0A:              0B64 DEFINED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
ARG1:               0B69 DEFINED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
ARG1A:              0B71 DEFINED AT LINE 1365 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
NUM:                0B74 DEFINED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 43
NUM0:               0B7D DEFINED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
NUM1:               0B7E DEFINED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1395 IN MAIN.asm
NUM2:               0B96 DEFINED AT LINE 1396 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
NUM3:               0BA1 DEFINED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
RBRACE:             0BA4 DEFINED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKEND:           0BA4 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
BLOCKEND1:          0BD6 DEFINED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
BLOCKEND2:          0BE2 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
BLOCKEND3:          0BF4 DEFINED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
BLOCKEND4:          0C08 DEFINED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
GOBLOCK:            0C11 DEFINED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
GOBLOCK2:           0C36 DEFINED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
GOBLOCK3:           0C40 DEFINED AT LINE 1491 IN MAIN.asm
GOFUNC:             0C44 DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
GOFUNC1:            0C5D DEFINED AT LINE 1514 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
GOFUNC2:            0C63 DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
GOFUNC3:            0C6E DEFINED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
GOFUNC4:            0C86 DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
GOFUNC5:            0C89 DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
GOFUNC6:            0C8C DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
GOFUNC7:            0C8F DEFINED AT LINE 1554 IN MAIN.asm
GOFUNC8:            0C93 DEFINED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
ASSIGN:             0C9E DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0CA0 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
ASSIGN1:            0CA4 DEFINED AT LINE 1576 IN MAIN.asm
ASSIGN2:            0CAD DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
EQUALS:             0CAF DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0CB6 DEFINED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0CBD DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0CC2 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0CC7 DEFINED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
TRUE1:              0CCA DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
NULL1:              0CD0 DEFINED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
FALSE1:             0CD0 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
SPREAD:             0CD6 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
SPREAD1:            0CE3 DEFINED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
SPREAD2:            0CEE DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
SPREAD3:            0CF0 DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
SHIFTLEFT:          0CFA DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0D04 DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
SHIFTLEFT3:         0D0C DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
SHIFTLEFT4:         0D0D DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
SHIFTRIGHT:         0D16 DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0D20 DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
SHIFTRIGHT3:        0D28 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
SHIFTRIGHT4:        0D2C DEFINED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
DIVIDE:             0D35 DEFINED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
DIVIDE1:            0D3A DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
DIVIDE2:            0D47 DEFINED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
DIVIDE3:            0D48 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
DOTNEXT:            0D4E DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
DOTNEXT1:           0D56 DEFINED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 1730 IN MAIN.asm
PARSEARGS:          0D68 DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
PARSEARGS1:         0D72 DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
PARSEARGS1A:        0D7A DEFINED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
PARSEARGS2:         0D82 DEFINED AT LINE 1761 IN MAIN.asm
PARSEARGS3:         0D8A DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
PARSEARGS4:         0D8D DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
PARSEARGS5:         0D93 DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
PARSEBLOCK:         0D9E DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
PARSEBLOCK1:        0DA2 DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
PARSEBLOCK2:        0DBB DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
PARSEBLOCK3:        0DC1 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
PARSEBLOCK4:        0DDB DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
PARSEBLOCK5:        0DDE DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
PARSEBLOCK6:        0E09 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
CREATEFUNC:         0E0D DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
CREATEFUNC0:        0E2C DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
CREATEFUNC1:        0E44 DEFINED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
CREATEFUNC2:        0E57 DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
CREATEFUNC2A:       0E76 DEFINED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
CREATEFUNC3:        0E85 DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
CREATEFUNC4:        0E90 DEFINED AT LINE 1955 IN MAIN.asm
CREATEFUNC5:        0E91 DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
VARIABLE:           0EAF DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
CONSTANT:           0EBE DEFINED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
CHARTABLE:          0EC1 DEFINED AT LINE 2002 IN MAIN.asm
CHARTABLE1:         0ECB DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
CHARTABLE2:         0ED5 DEFINED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
CHARTABLE3:         0ED7 DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
IDENTHASH:          0EDC DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
IDENTHASH1:         0EDE DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
IDENTHASH2:         0EE6 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
COMMANDTABLE:       0EEE DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
COMMANDTABLE2:      0EF6 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
GETVARADDR:         0EFE DEFINED AT LINE 2065 IN MAIN.asm
GETVARADDR1:        0F10 DEFINED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
PUTSTR0:            0F15 DEFINED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
PUTSTR:             0F19 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
FORMATDEC0:         0F1E DEFINED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
FORMATDEC:          0F21 DEFINED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
FORMATDEC2:         0F31 DEFINED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
FORMATDEC4:         0F51 DEFINED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
FORMATDEC5:         0F53 DEFINED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
FORMATDEC6:         0F63 DEFINED AT LINE 2143 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
FORMATDEC7:         0F64 DEFINED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
NESTING:            0F6A DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2384 IN MAIN.asm
NESTING0:           0F78 DEFINED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
NESTING1A:          0F7F DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
NESTING1:           0F82 DEFINED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
NESTING2:           0F91 DEFINED AT LINE 2188 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
NESTING3:           0F93 DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
NESTING4:           0F9E DEFINED AT LINE 2198 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
PROMPT:             0FA0 DEFINED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
CRLF:               0FA9 DEFINED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
PRINTSTR:           0FB0 DEFINED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2 IN ansi.asm
                    > USED AT LINE 8 IN ansi.asm
                    > USED AT LINE 69 IN ansi.asm
PRINTNUM:           0FB7 DEFINED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 33 IN ansi.asm
                    > USED AT LINE 39 IN ansi.asm
                    > USED AT LINE 52 IN ansi.asm
STRINGCOMPARE:      0FD0 DEFINED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
STRINGCOMPARE1:     0FD0 DEFINED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
STRINGCOMPARE2:     0FDB DEFINED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
STRINGCOMPARE3:     0FE0 DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
STRINGCOMPARE4:     0FE3 DEFINED AT LINE 2252 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
STRINGLENGTH:       0FE5 DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
STRINGLENGTH1:      0FEA DEFINED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
STRINGLENGTH2:      0FEC DEFINED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
STRINGLENGTH3:      0FF0 DEFINED AT LINE 2269 IN MAIN.asm
INIT:               0FF1 DEFINED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
INIT1:              0FF9 DEFINED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
WARMINIT:           1001 DEFINED AT LINE 2288 IN MAIN.asm
COLDBOOT0:          1014 DEFINED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
COLDINIT:           101E DEFINED AT LINE 2301 IN MAIN.asm
COLDBOOT1:          102F DEFINED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
COLDSTART:          103C DEFINED AT LINE 2319 IN MAIN.asm
START:              1045 DEFINED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 7
START1:             104B DEFINED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
INTERPRET:          1051 DEFINED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
                    > USED AT LINE 2460 IN MAIN.asm
INTERPRET2:         105D DEFINED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2487 IN MAIN.asm
INTERPRET3:         1065 DEFINED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
INTERPRET4:         106B DEFINED AT LINE 2352 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
INTERPRET5:         1070 DEFINED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
INTERPRET5A:        1089 DEFINED AT LINE 2374 IN MAIN.asm
INTERPRET6:         108B DEFINED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
INTERPRET7:         1099 DEFINED AT LINE 2387 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
INTERPRET8:         10AC DEFINED AT LINE 2402 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
NEXT:               10C7 DEFINED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
NEXT0:              10D2 DEFINED AT LINE 2424 IN MAIN.asm
                    > USED AT LINE 2428 IN MAIN.asm
NEXT1:              10E9 DEFINED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
EXIT:               10F0 DEFINED AT LINE 2446 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
RUN:                10F4 DEFINED AT LINE 2451 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
ERROR:              10F8 DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
BACKSPACE_:         110A DEFINED AT LINE 2462 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
REEDIT_:            111A DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
REEDIT0:            1126 DEFINED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
REEDIT1:            112A DEFINED AT LINE 2479 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
HASH:               113A DEFINED AT LINE 2493 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
HASH1:              113F DEFINED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2504 IN MAIN.asm
ANSIPRINTSEQ:       1147 DEFINED AT LINE 1 IN ansi.asm
                    > USED AT LINE 19 IN ansi.asm
                    > USED AT LINE 28 IN ansi.asm
                    > USED AT LINE 47 IN ansi.asm
                    > USED AT LINE 60 IN ansi.asm
ANSICLEARSCREEN:    114E DEFINED AT LINE 7 IN ansi.asm
                    > USED AT LINE 805 IN MAIN.asm
ANSICLEARLINE:      1157 DEFINED AT LINE 16 IN ansi.asm
                    > USED AT LINE 820 IN MAIN.asm
ANSIGOTO:           1166 DEFINED AT LINE 26 IN ansi.asm
                    > USED AT LINE 798 IN MAIN.asm
ANSIMOVE:           1183 DEFINED AT LINE 45 IN ansi.asm
                    > USED AT LINE 834 IN MAIN.asm
ANSITEXTSTYLE:      1193 DEFINED AT LINE 57 IN ansi.asm
ANSICURSORSHOW:     11A2 DEFINED AT LINE 67 IN ansi.asm
                    > USED AT LINE 850 IN MAIN.asm
DSTACK_SIZE:        0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 8 IN ram.asm
RSTACK_SIZE:        0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
NAMES_SIZE:         0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 15 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 18 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 21 IN ram.asm
STACK:              2100 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
DSTACK:             2100 DEFINED AT LINE 10 IN ram.asm
RSTACK:             2100 DEFINED AT LINE 12 IN ram.asm
NAMES:              2200 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
TIB:                2300 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2379 IN MAIN.asm
                    > USED AT LINE 2389 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
BUFFER:             2400 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
VARS:               2500 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 2307 IN MAIN.asm
RESTARTS:           25D0 DEFINED AT LINE 26 IN ram.asm
RST08:              25D0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              25D2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              25D4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              25D6 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              25D8 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              25DA DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               25DC DEFINED AT LINE 34 IN ram.asm
INTVEC:             25DE DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             25E0 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            25E2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            25E4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            25E6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2303 IN MAIN.asm
VTIBPTR:            25E6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
VBUFPTR:            25E8 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
VHEAPPTR:           25EA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
VNAMESPTR:          25EC DEFINED AT LINE 47 IN ram.asm
VRECURPTR:          25EE DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
VDATAWIDTH:         25F0 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
VNUMBASE:           25F1 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
VHEXPREFIX:         25F2 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 677 IN MAIN.asm
VECHO:              25F3 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
VSTRMODE:           25F4 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 1728 IN MAIN.asm
VPOINTER:           25FA DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
VREMAIN:            25FC DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
VSAVEDIP:           25FE DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
VSAVEDDSP:          2600 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
VSAVEDRSP:          2602 DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
VSAVEDNEXT:         2604 DEFINED AT LINE 68 IN ram.asm
                    > USED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
VSAVEDBP:           2606 DEFINED AT LINE 69 IN ram.asm
VTEMP1:             2608 DEFINED AT LINE 73 IN ram.asm
                    > USED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
VTEMP2:             260A DEFINED AT LINE 74 IN ram.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
VTEMP3:             260C DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
TBPTR:              2610 DEFINED AT LINE 77 IN ram.asm
TITLEBUF:           2612 DEFINED AT LINE 79 IN ram.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
HEAP:               2626 DEFINED AT LINE 81 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
